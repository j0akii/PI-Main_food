[{"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/index.js":"1","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/App.js":"2","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/reportWebVitals.js":"3","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/redux/store.js":"4","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/redux/reducer.js":"5","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Landing/Landing.jsx":"6","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/redux/actions.js":"7","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Home/Home.jsx":"8","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/NavBar/NavBar.jsx":"9","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Recipes/Recipes.jsx":"10","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Card/Card.jsx":"11","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/About/About.jsx":"12","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Footer/Footer.jsx":"13","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/SearchBar/SearchBar.jsx":"14","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Detail/Detail.jsx":"15","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Form.jsx":"16","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/PopUp/PopUp.jsx":"17","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations.js":"18"},{"size":717,"mtime":1682537071747,"results":"19","hashOfConfig":"20"},{"size":1461,"mtime":1683657351355,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1678720658000,"results":"22","hashOfConfig":"20"},{"size":345,"mtime":1682444988792,"results":"23","hashOfConfig":"20"},{"size":5037,"mtime":1683485106555,"results":"24","hashOfConfig":"20"},{"size":853,"mtime":1682810898322,"results":"25","hashOfConfig":"20"},{"size":2939,"mtime":1683582735634,"results":"26","hashOfConfig":"20"},{"size":6519,"mtime":1683660620240,"results":"27","hashOfConfig":"20"},{"size":2305,"mtime":1683657368011,"results":"28","hashOfConfig":"20"},{"size":15201,"mtime":1683741401576,"results":"29","hashOfConfig":"20"},{"size":858,"mtime":1683551696323,"results":"30","hashOfConfig":"20"},{"size":1004,"mtime":1683553858788,"results":"31","hashOfConfig":"20"},{"size":1375,"mtime":1683314147284,"results":"32","hashOfConfig":"20"},{"size":1147,"mtime":1683189634224,"results":"33","hashOfConfig":"20"},{"size":3049,"mtime":1683740046068,"results":"34","hashOfConfig":"20"},{"size":9621,"mtime":1683730871788,"results":"35","hashOfConfig":"20"},{"size":499,"mtime":1683315051685,"results":"36","hashOfConfig":"20"},{"size":2636,"mtime":1683556524893,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1m6pw6x",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/index.js",[],["84","85"],"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/App.js",[],"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/reportWebVitals.js",[],"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/redux/store.js",[],"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/redux/reducer.js",["86","87","88","89"],"import { FILTER_DIETS, ORDERING, GET_ID_RECIPES, GET_NAME_RECIPES, GET_ALL_DIETS, GET_ALL_RECIPES, UPDATE_SELECTED_DIETS, FILTER_TYPE, VALIDATION_ERRORS } from \"./actions\";\n\n\nconst initialState = {\n  allRecipes: [],\n  idRecipe: [],\n  nameRecipes: [],\n  allDiets: [],\n  filtredRecipes: [],\n  selectedDiets: [],\n  valErrors: [],\n};\n\n\nconst rootReducer = (state = initialState, actions) => {\n    switch (actions.type) {\n      case GET_ALL_RECIPES:\n        return {\n          ...state,\n          allRecipes: actions.payload,\n        };\n\n      case GET_ID_RECIPES:\n        return {\n          ...state,\n          idRecipe: actions.payload,\n        };\n\n      case GET_NAME_RECIPES:\n        return {\n          ...state,\n          allRecipes: actions.payload,\n        };\n\n      case GET_ALL_DIETS:\n        return {\n          ...state,\n          allDiets: actions.payload,\n        };\n\n      case ORDERING:\n        if (actions.payload === \"A\") {\n          return {\n            ...state,\n            filtredRecipes: state.filtredRecipes.length\n              ? state.filtredRecipes.sort((a, b) =>\n                  a.name.localeCompare(b.name)\n                )\n              : state.allRecipes.sort((a, b) => a.name.localeCompare(b.name)),\n          };\n        } \n        else if (actions.payload === \"D\") {\n          return {\n            ...state,\n            filtredRecipes: state.filtredRecipes.length\n              ? state.filtredRecipes.sort((a, b) =>\n                  b.name.localeCompare(a.name)\n                )\n              : state.allRecipes.sort((a, b) => b.name.localeCompare(a.name)),\n          };\n        } \n        else if (actions.payload === \"hplus\") {\n          return {\n            ...state,\n            filtredRecipes: state.filtredRecipes.length\n              ? state.filtredRecipes.sort(\n                  (a, b) => b.healthScore - a.healthScore\n                )\n              : state.allRecipes.sort((a, b) => b.healthScore - a.healthScore),\n          };\n        } \n        else if (actions.payload === \"hless\") {\n          return {\n            ...state,\n            filtredRecipes: state.filtredRecipes.length\n              ? state.filtredRecipes.sort(\n                  (a, b) => a.healthScore - b.healthScore\n                )\n              : state.allRecipes.sort((a, b) => a.healthScore - b.healthScore),\n          };\n        } \n        else if (actions.payload == \"pplus\") {\n          return {\n            ...state,\n            filtredRecipes: state.filtredRecipes.length\n              ? state.filtredRecipes.sort((a, b) => b.price - a.price)\n              : state.allRecipes.sort((a, b) => b.price - a.price),\n          };\n        } \n        else if (actions.payload == \"pless\") {\n          return {\n            ...state,\n            filtredRecipes: state.filtredRecipes.length\n              ? state.filtredRecipes.sort((a, b) => a.price - b.price)\n              : state.allRecipes.sort((a, b) => a.price - b.price),\n          };\n        }\n\n      case UPDATE_SELECTED_DIETS:\n        return {\n          ...state,\n          selectedDiets: {\n            ...state.selectedDiets,\n            [Object.keys(actions.payload.selectedDiets)]: actions.payload.selectedDiets[Object.keys(actions.payload.selectedDiets)],\n          }\n        };\n\n      case FILTER_DIETS:\n        const selectedDietKeys = Object.keys(state.selectedDiets).filter(\n          (key) => state.selectedDiets[key]\n        );\n\n        if (selectedDietKeys.length === 0) {\n          return {\n            ...state,\n            filtredRecipes: state.allRecipes,\n          };\n        }\n\n        return {\n          ...state,\n          filtredRecipes: state.filtredRecipes.length \n          ? state.filtredRecipes.filter((recipe) => selectedDietKeys.every((diet) => {\n              return recipe.diets.length > 0 && recipe.diets.includes(diet.toLowerCase());\n            })\n          )\n          : state.allRecipes.filter((recipe) => selectedDietKeys.every((diet) => {\n              return recipe.diets.length > 0 && recipe.diets.includes(diet.toLowerCase());\n            })\n          )\n        }\n\n      case FILTER_TYPE:\n        if (actions.payload === \"ALL\") {\n          return {\n            ...state,\n            filtredRecipes: state.allRecipes,\n          };\n        } \n        else if (actions.payload === \"DB\") {\n          return {\n            ...state,\n            filtredRecipes: state.allRecipes.filter((recipe) => typeof recipe.id !== 'number' && recipe)\n          };\n        } \n        else if (actions.payload === \"API\") {\n          return {\n            ...state,\n            filtredRecipes: state.allRecipes.filter((recipe) => typeof recipe.id === 'number' && recipe)\n          };\n        }\n\n      case VALIDATION_ERRORS:\n        console.log(state.valErrors);\n        return {\n          ...state,\n          valErrors: {\n            ...state.valErrors,\n            [Object.keys(actions.payload)]: actions.payload[Object.keys(actions.payload)],\n          }\n        };\n\n\n      default:\n        return { ...state };\n    }\n}\n\nexport default rootReducer;","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Landing/Landing.jsx",["90"],"import style from './Landing.module.css';\nimport Variables from '../Variables/Variables.module.css'\nimport { useNavigate } from 'react-router-dom';\n\n\nexport default function Landing () {\n    const nav = useNavigate()\n    const navigation = () => {\n        nav('/Home')\n    }\n\n    return (\n        <div className={style.container}>\n            <p className={style.p}>Amazing & Delicious</p>\n            <i className={style.i}></i>\n            <h1 className={style.h1}>Welcome to the master of recipes: here you will find all kinds of recipes.</h1>\n\n\n            <button className={style.btn} onClick={navigation}>\n              <span className={`${style.text} ${style.text_1}`}>View The Recipes</span>\n              <span className={`${style.text} ${style.text_2} `} aria-hidden=\"true\">View The Recipes</span>\n            </button>\n        </div>\n    )\n}","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/redux/actions.js",[],"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Home/Home.jsx",["91","92","93","94","95","96","97"],"import { useEffect } from 'react'\nimport style from './Home.module.css'\nimport { useNavigate } from 'react-router-dom'\nimport image from '../../images/menu-4.png'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getAllRecipes} from '../../redux/actions'\n\n\nexport default function Home () {\n    const dispatch = useDispatch();\n    const recipes = useSelector(state => state.allRecipes);\n\n    const nav = useNavigate();\n    const navigation = () => {\n        nav('/Recipes')\n    }\n    \n    const navigationId = (id) => {\n        nav(`/Recipes/Detail/${id}`)\n    }\n\n    useEffect(() => {\n        dispatch(getAllRecipes());\n    }, [dispatch]);\n\n\n    return (    \n        <div className={style.container}>\n            <section className={`${style.section} ${style.head}`}>\n                <h1 className={style.h1}>Welcome To Recipe Master!</h1>\n                <p className={style.p}>Welcome to my page! This is a page that receives recipes from an API and you can also add the recipes you consider necessary to complement the recipes stored on this page. All the recipes you create will be stored in our database. To see all our recipes, click below:</p>\n                <button className={style.btn} onClick={navigation}>\n                    <span className={`${style.text} ${style.text_1}`}>Get started</span>\n                    <span className={`${style.text} ${style.text_2} `} aria-hidden=\"true\">Get started</span>\n                </button>\n            </section>\n\n            <section className={`${style.section} ${style.recomendated}`}>\n                <p className={style.p}>Our Specials</p>\n                <i className={style.i}></i>\n                <h1 className={style.h1}>House <span className={style.span}>Recommendations</span></h1>\n\n                <div className={style.container}>\n                    <div className={style.card} onClick={() => navigationId(recipes.length && recipes[0].id)}>\n                        <img className={style.img} src={recipes.length && recipes[0].image}/>\n                        <div className={style.content}>\n                            <div className={style.title}>\n                                <h1 className={style.h1}>{recipes.length && recipes[0].name}</h1>\n                                <div className={style.sep}></div>\n                                <h1 className={style.price}>{recipes.length && recipes[0].price}$</h1>\n                            </div>\n                            <p className={style.p}>{recipes.length && recipes[0].summary}</p>\n                        </div>\n                    </div>\n                    <div className={style.card} onClick={() => navigationId(recipes.length && recipes[1].id)}>\n                        <img className={style.img} src={recipes.length && recipes[1].image}/>\n                        <div className={style.content}>\n                            <div className={style.title}>\n                                <h1 className={style.h1}>{recipes.length && recipes[1].name}</h1>\n                                <div className={style.sep}></div>\n                                <h1 className={style.price}>{recipes.length && recipes[1].price}$</h1>\n                            </div>\n                            <p className={style.p}>{recipes.length && recipes[1].summary}</p>\n                        </div>\n                    </div>\n                    <div className={style.card} onClick={() => navigationId(recipes.length && recipes[2].id)}>\n                        <img className={style.img} src={recipes.length && recipes[2].image}/>\n                        <div className={style.content}>\n                            <div className={style.title}>\n                                <h1 className={style.h1}>{recipes.length && recipes[2].name}</h1>\n                                <div className={style.sep}></div>\n                                <h1 className={style.price}>{recipes.length && recipes[2].price}$</h1>\n                            </div>\n                            <p className={style.p}>{recipes.length && recipes[2].summary}</p>\n                        </div>\n                    </div>\n                    <div className={style.card} onClick={() => navigationId(recipes.length && recipes[3].id)}>\n                        <img className={style.img} src={recipes.length && recipes[3].image}/>\n                        <div className={style.content}>\n                            <div className={style.title}>\n                                <h1 className={style.h1}>{recipes.length && recipes[3].name}</h1>\n                                <div className={style.sep}></div>\n                                <h1 className={style.price}>{recipes.length && recipes[3].price}$</h1>\n                            </div>\n                            <p className={style.p}>{recipes.length && recipes[3].summary}</p>\n                        </div>\n                    </div>\n                    <div className={style.card} onClick={() => navigationId(recipes.length && recipes[4].id)}>\n                        <img className={style.img} src={recipes.length && recipes[4].image}/>\n                        <div className={style.content}>\n                            <div className={style.title}>\n                                <h1 className={style.h1}>{recipes.length && recipes[4].name}</h1>\n                                <div className={style.sep}></div>\n                                <h1 className={style.price}>{recipes.length && recipes[4].price}$</h1>\n                            </div>\n                            <p className={style.p}>{recipes.length && recipes[4].summary}</p>\n                        </div>\n                    </div>\n                    <div className={style.card} onClick={() => navigationId(recipes.length && recipes[5].id)}>\n                        <img className={style.img} src={recipes.length && recipes[5].image}/>\n                        <div className={style.content}>\n                            <div className={style.title}>\n                                <h1 className={style.h1}>{recipes.length && recipes[5].name}</h1>\n                                <div className={style.sep}></div>\n                                <h1 className={style.price}>{recipes.length && recipes[5].price}$</h1>\n                            </div>\n                            <p className={style.p}>{recipes.length && recipes[5].summary}</p>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </div>\n    )\n}\n","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/NavBar/NavBar.jsx",["98","99","100","101","102"],"import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport style from './NavBar.module.css';\nimport { NavLink } from 'react-router-dom';\n\nexport default function NavBar() {\n    const [isSticky, setIsSticky] = useState(false);\n    const location = useLocation();\n    const [currentPath, setCurrentPath] = useState(location.pathname);\n    const nav = useNavigate();\n    const navigation = () => {\n        nav('/Recipes/Form')\n    }\n\n    const [menuOpen, setMenuOpen] = useState(false);\n\n    const handleMenu = () => {\n        setMenuOpen(!menuOpen);\n    };\n\n    const handleScroll = () => {\n        const scrollTop = window.pageYOffset;\n        setIsSticky(scrollTop > 10);\n    };\n\n    useEffect(() => {\n        setCurrentPath(location.pathname);\n    }, [location]);\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll);\n        return () => {\n        window.removeEventListener('scroll', handleScroll);\n        };\n    }, []);\n\n  return (\n    <header className={`${style.header} ${isSticky ? style.sticky : ''}`}>\n        <a href='#' className={style.logo}>j0aki</a>\n\n        <nav className={`${style.navbar} ${menuOpen ? style.actual : ''}`}>\n            <NavLink to={'/Home'} className={style.link}>\n                <a className={currentPath === '/Home' ? style.act : style.a}>Home</a>\n                <div className={style.separator}></div>\n            </NavLink>\n            <NavLink to={'/Recipes'} className={style.link}>\n                <a className={currentPath.includes('/Recipes') ? style.act : style.a}>Recipes</a>\n                <div className={style.separator}></div>\n            </NavLink>\n            <NavLink to={'/About'} className={style.link}>\n                <a className={currentPath === '/About' ? style.act : style.a}>About</a>\n            </NavLink>\n        </nav>\n\n        <button className={style.btn} onClick={navigation}>\n            <span className={`${style.text} ${style.text_1}`}>Create Your Own!</span>\n            <span className={`${style.text} ${style.text_2} `} aria-hidden=\"true\">Create Your Own!</span>\n        </button>\n\n        <a className={style.menu_icon} onClick={handleMenu}>\n            <i class={menuOpen ? 'bx bx-x' : 'bx bx-menu'}></i>\n        </a>\n    </header>\n  );\n}","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Recipes/Recipes.jsx",["103","104"],"import React from 'react'\nimport style from './Recipes.module.css'\nimport Card from '../Card/Card'\nimport SearchBar from '../SearchBar/SearchBar'\nimport { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getAllRecipes, orderRecipes, updateSelectedDiets, filterDietsRecipes, filterTypeRecipes } from '../../redux/actions'\nimport separator from '../../images/Separator-Back.svg'\n\n\nexport default function Recipes () {\n    const dispatch = useDispatch();\n    const recipes = useSelector(state => state.allRecipes);\n    const { filtredRecipes } = useSelector(state => state);\n    const { selectedDiets } = useSelector(state => state);\n    const [selectedFilter, setSelectedFilter] = useState({});\n    \n\n\n    const handleOrder = (e) => {\n        const { value } = e.target;\n        setSelectedFilter({ [value]: !selectedFilter[value] });\n        dispatch(orderRecipes(value));\n    }\n\n    const handleType = (e) => {\n        const { value } = e.target;\n        const isChecked = e.target.checked;\n\n        setSelectedFilter({ [value]: !selectedFilter[value] });\n        isChecked && dispatch(filterTypeRecipes(value));\n    }\n\n    const [currentPage, setCurrentPage] = useState(1);\n\n    function getCurrentRecipes() {\n        const firstIndex = (currentPage - 1) * 9;\n        const lastIndex = currentPage * 9;\n\n        return filtredRecipes.length ? filtredRecipes.slice(firstIndex, lastIndex) : recipes.slice(firstIndex, lastIndex);\n        }\n\n        function goToPreviousPage() {\n            if (currentPage > 1) {\n                setCurrentPage(currentPage - 1);\n            }\n        }\n\n        function goToNextPage() {\n            if (currentPage < Math.ceil(filtredRecipes.length ? filtredRecipes.length / 9 : recipes.length / 9)) {\n                setCurrentPage(currentPage + 1);\n            }\n        }\n\n        const handlePageClick = (pageNumber) => {\n            setCurrentPage(pageNumber);\n        };\n\n        const totalPages = Math.ceil(filtredRecipes.length ? filtredRecipes.length / 9 : recipes.length / 9);\n\n        const renderPageButtons = () => {\n        const pageButtons = [];\n\n        const startPage = Math.max(currentPage - 4, 1);\n        const endPage = Math.min(currentPage + 4, totalPages);\n\n        for (let i = startPage; i <= endPage; i++) {\n        pageButtons.push(\n            <button\n            key={i}\n            onClick={() => handlePageClick(i)}\n            className={currentPage === i ? style.actual : style.btn}\n            >\n            {i}\n            </button>\n        );\n        }\n\n        if (endPage < totalPages) {\n        pageButtons.push(\n            <button key=\"ellipsis\" className={style.elipsis}>...</button>\n        );\n        pageButtons.push(\n            <button\n            key={totalPages}\n            onClick={() => handlePageClick(totalPages)}\n            className={style.btn}\n            >\n            {totalPages}\n            </button>\n        );\n        }\n\n        return pageButtons;\n    };\n\n    const [showMoreState, setShowMoreState] = useState(true);\n\n    const showMore = () => {\n        setShowMoreState(!showMoreState)\n    }\n\n\n    const handleDietsFilter = (e) => {\n        const { value } = e.target;\n        const isChecked = e.target.checked;\n\n        dispatch(updateSelectedDiets({[value]: isChecked}))\n    };\n\n    const setDietsFilter = () => {\n        dispatch(filterDietsRecipes());\n    };\n\n    useEffect(() => {\n        setDietsFilter();\n        setCurrentPage(1);\n    }, [selectedDiets])\n\n    useEffect(() => {\n        dispatch(getAllRecipes());\n    }, [dispatch]);\n\n    const spacedWords = { Vegetarian: 'Lacto Ovo Vegetarian', Fodmap: 'Fodmap Friendly', Gluten: 'Gluten Free', Dairy: 'Dairy Free', Whole30: 'Whole 30' }\n\n    return (\n        <div className={style.container}>\n            <section className={style.sectionCards}>\n                <div className={style.wrapper}>\n                    <SearchBar />\n                    <div className={style.separatorBar}></div>\n                    <button className={style.btnFilter} onClick={showMore}>\n                        <span className={`${style.text} ${style.text_1}`}><i class='bx bx-filter-alt'></i></span>\n                        <span className={`${style.text} ${style.text_2}`} aria-hidden=\"true\"><i class='bx bx-filter-alt'></i></span>\n                    </button>\n                </div>\n                <div className={ showMoreState ? style.containerFilters : `${style.containerFilters} ${style.containerFiltersShow}`}>\n                        <div className={style.dietsFilter}>\n                            <h1 className={style.dietsTitle}>Select Order:</h1>\n                            <div className={style.dietsFilterCont}>\n                                <label className={selectedFilter.A ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Ascendent\n                                    <input className={style.option} onChange={handleOrder} type='checkbox' value=\"A\" />\n                                </label>\n                                <label className={selectedFilter.hplus ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Healthier\n                                    <input className={style.option} onChange={handleOrder} type='checkbox' value=\"hplus\" />\n                                </label> \n                                <label className={selectedFilter.pplus ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Expensive\n                                    <input className={style.option} onChange={handleOrder} type='checkbox' value=\"pplus\" />\n                                </label>    \n                                <label className={selectedFilter.D ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Descending\n                                    <input className={style.option} onChange={handleOrder} type='checkbox' value=\"D\" />\n                                </label>\n                                <label className={selectedFilter.hless ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Less Healthy\n                                    <input className={style.option} onChange={handleOrder} type='checkbox' value=\"hless\" />\n                                </label>\n                                <label className={selectedFilter.pless ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Economic\n                                    <input className={style.option} onChange={handleOrder} type='checkbox' value=\"pless\" />\n                                </label>\n                            </div>\n                        </div>\n                        <div className={style.separator1}></div>\n                        <div className={style.dietsFilter}>\n                            <h1 className={style.dietsTitle}>Select Diet:</h1>\n                            <div className={style.dietsFilterCont}>\n                                <label className={selectedDiets.Vegan ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Vegan\n                                    <input className={style.option} type='checkbox' value=\"Vegan\" onChange={handleDietsFilter}/>\n                                </label>\n                                <label className={selectedDiets[spacedWords.Vegetarian] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Vegetarian\n                                    <input className={style.option} type='checkbox' value=\"Lacto Ovo Vegetarian\" onChange={handleDietsFilter}/>\n                                </label>\n                                <label className={selectedDiets[spacedWords.Fodmap] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Fodmap F.\n                                    <input className={style.option} type='checkbox' value=\"Fodmap Friendly\" onChange={handleDietsFilter}/>\n                                </label>\n                                <label className={selectedDiets.Ketogenic ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Ketogenic\n                                    <input className={style.option} type='checkbox' value=\"Ketogenic\" onChange={handleDietsFilter}/>\n                                </label>\n                                <label className={selectedDiets[spacedWords.Gluten] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Gluten Free\n                                    <input className={style.option} type='checkbox' value=\"Gluten Free\" onChange={handleDietsFilter}/>\n                                </label>\n                                <label className={selectedDiets[spacedWords.Dairy] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Dairy Free\n                                    <input className={style.option} type='checkbox' value=\"Dairy Free\" onChange={handleDietsFilter}/>\n                                </label>\n                                <label className={selectedDiets.Paleolithic ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Paleolithic\n                                    <input className={style.option} type='checkbox' value=\"Paleolithic\" onChange={handleDietsFilter}/>\n                                </label>\n                                <label className={selectedDiets.Primal ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Primal\n                                    <input className={style.option} type='checkbox' value=\"Primal\" onChange={handleDietsFilter}/>\n                                </label>\n                                <label className={selectedDiets[spacedWords.Whole30] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Whole30\n                                    <input className={style.option} type='checkbox' value=\"Whole 30\" onChange={handleDietsFilter}/>\n                                </label>\n                            </div>\n                        </div>\n                        <div className={style.separator2}></div>\n                        <div className={style.dietsFilter}>\n                            <h1 className={style.dietsTitle}>Select Type:</h1>\n                            <div className={style.dietsFilterCont}>\n                                <label className={selectedFilter.ALL ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>All Recipes\n                                    <input className={style.option} onChange={handleType} type='checkbox' value=\"ALL\" />\n                                </label>\n                                <label className={selectedFilter.DB ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Your Recipes\n                                    <input className={style.option} onChange={handleType} type='checkbox' value=\"DB\" />\n                                </label>\n                                <label className={selectedFilter.API ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Api Recipes\n                                    <input className={style.option} onChange={handleType} type='checkbox' value=\"API\" />\n                                </label>\n                            </div>\n                        </div>\n                </div>\n            <div className={style.containerCard}>\n                {getCurrentRecipes().map(({id, name, image, summary, healthScore, stepByStep, price, diets}) => {\n                return (\n                    <Card\n                        key={id}\n                        id={id} \n                        name={name} \n                        summary={summary} \n                        healthScore={healthScore} \n                        stepByStep={stepByStep} \n                        image={image}\n                        price={price}\n                        diets={diets}\n                    />\n                    )\n                }) \n            }\n            </div>\n\n                <div className={style.pagination}>\n                    <button\n                    className={style.btnPrev}\n                    onClick={goToPreviousPage}\n                    disabled={currentPage === 1}\n                    >\n                    &laquo; Prev\n                    </button>\n\n                    {renderPageButtons()}\n\n                    <button\n                    className={style.btnNext}\n                    onClick={goToNextPage}\n                    disabled={currentPage === totalPages}\n                    >\n                    Next &raquo;\n                    </button>\n                </div>\n            </section>\n            <section className={style.sectionInfo}>\n                <div className={style.containerInfo}>\n                    <div className={style.icon1}>\n                        <div className={style.img1}></div>\n                        <div className={style.iconContent}>\n                            <span className={style.span1}>We only recommend ingredients of the highest possible quality</span>\n                            <div className={style.separatorInfo1}></div>\n                            <div className={style.separatorInfo2}></div>\n                            <div className={style.separatorInfo3}></div>\n                        </div>\n                    </div>\n                    <div className={style.icon2}>\n                        <div className={style.img2}></div>\n                        <div className={style.iconContent}>\n                            <span className={style.span2}>We work with the best restaurants in the area, and we also receive their advice.</span>\n                            <div className={style.separatorInfo1}></div>\n                            <div className={style.separatorInfo2}></div>\n                            <div className={style.separatorInfo3}></div>\n                        </div>\n                    </div>\n                    <div className={style.icon3}>\n                        <div className={style.img3}></div>\n                        <div className={style.iconContent}>\n                            <span className={style.span3}>Recipes elaborated and designed by our best chefs worldwide.</span>\n                            <div className={style.separatorInfo1}></div>\n                            <div className={style.separatorInfo2}></div>\n                            <div className={style.separatorInfo3}></div>\n                        </div>\n                    </div>\n                    <div className={style.icon4}>\n                        <div className={style.img4}></div>\n                        <div className={style.iconContent}>\n                            <span className={style.span4}>Free, all our content is completely free and available to everyone.</span>\n                            <div className={style.separatorInfo1}></div>\n                            <div className={style.separatorInfo2}></div>\n                            <div className={style.separatorInfo3}></div>\n                        </div>\n                    </div>\n                </div>\n                <img className={style.separatorImg} src={separator} />\n                <div className={style.imgback}></div>\n            </section>\n        </div>\n    )\n}\n","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Card/Card.jsx",[],"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/About/About.jsx",[],"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Footer/Footer.jsx",["105","106","107","108","109","110"],"import style from './Footer.module.css'\n\n\nexport default function Footer (props) {\n\n\n    return (\n        <div className={props.isCreated === true ? style.hide : style.container}>\n            <div className={style.contact}>\n                <h1 className={`${style.h1} ${style.contactUs}`}>Contact <span className={style.span}>Us:</span></h1>\n                <h3 className={style.h3}>examplemail@gmail.com</h3>\n                <h3 className={style.h3}>+54 9 2804 33 3691</h3>\n                <h3 className={style.h3}>Fake street 123</h3>\n            </div>\n            <div className={style.social}>\n                <h1 className={`${style.h1} ${style.socialMedia}`}>Social <span className={style.span}>Media:</span> </h1>\n                <h3 className={style.h3}><a href=\"\">Instagram</a></h3>\n                <h3 className={style.h3}><a href=\"\">Facebook</a></h3>\n                <h3 className={style.h3}><a href=\"\">YouTube</a></h3>\n            </div>\n            <div className={style.info}>\n                <h1 className={`${style.h1} ${style.information}`}>More <span className={style.span}>Info:</span> </h1>\n                <h3 className={style.h3}><a href=\"\">About Us</a></h3>\n                <h3 className={style.h3}><a href=\"\">Our Locations</a></h3>\n                <h3 className={style.h3}><a href=\"\">Some Extra Info</a></h3>\n            </div>\n        </div>\n    )\n}","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/SearchBar/SearchBar.jsx",[],"/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Detail/Detail.jsx",["111","112"],"import style from './Detail.module.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getIdRecipes } from '../../redux/actions'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport parse from 'html-react-parser';\n\nexport default function Detail () {\n    const dispatch = useDispatch();\n    const { id } = useParams();\n    const getRecipe = useSelector(state => state.idRecipe);\n    const recipe = getRecipe.length ? getRecipe[0] : {};\n    const [summary, setSummary] = useState([]);\n    // const [diets, setDiets] = useState([]);\n    const [showMoreState, setShowMoreState] = useState(true);\n\n    const showMore = () => {\n        setShowMoreState(!showMoreState)\n    }\n\n    useEffect(() => {\n        dispatch(getIdRecipes(id));\n    }, [dispatch])\n\n    // useEffect(() => {\n    //     const getDiets = async () => {\n    //         const diets = await recipe.diets && recipe.diets.map((diet) => '#' + diet + ', ');\n    //         const dietsFinal = [...diets.slice(0, -1), diets[diets.length -1].slice(0, -2)];\n    //         setDiets([dietsFinal]);\n    //     }\n    //     getDiets();\n    // }, [recipe.diets])\n\n    useEffect(() => {\n        const getSummary = async () => {\n            const summary = await recipe.summary && parse(recipe.summary);\n            setSummary([summary]);\n        }\n        getSummary();\n    }, [recipe.summary])\n\n    return (\n        <div className={style.container}>\n            <div className={style.containerContent}>\n                <img className={style.img} src={recipe.image} />\n                <div className={style.content}>\n                    <div className={style.infoContent}>\n                        <h1 className={style.price}><i class='bx bx-money' ></i>{recipe.price}</h1>\n                        <div className={style.infoSeparator}></div>\n                        <h1 className={style.healthData}><i class='bx bxs-leaf'></i>{recipe.healthScore}</h1>\n                    </div>\n                    <div className={style.titleContainer}>\n                        <h1 className={style.title}>{recipe.name}</h1>\n                        <div className={style.separator1}></div>\n                        <div className={style.separator2}></div>\n                        <div className={style.separator3}></div>\n                    </div>\n                    <h3 className={style.data}>{summary}</h3>\n                    <h3 className={style.h2}>{recipe.diets}</h3>\n                    <button className={style.btn} onClick={showMore}>\n                        <span className={`${style.text} ${style.text_1}`}>Show Step By Step<i class='bx bxs-down-arrow-square'></i></span>\n                        <span className={`${style.text} ${style.text_2}`} aria-hidden=\"true\">Show Step By Step<i class='bx bxs-down-arrow-square'></i></span>\n                    </button>\n                </div>\n            </div>\n            <h3 className={showMoreState ? style.desactive : `${style.desactive} ${style.active}`}>{recipe.stepByStep}</h3>\n        </div>\n    )\n}","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Form.jsx",["113","114","115"],"import style from './Form.module.css'\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Validations from './Validations'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setValidationErrors } from '../../redux/actions'\n\n\nexport default function Form (props) {\n    const dispatch = useDispatch();\n    const URL_END = 'http://localhost:3001/recipes/'\n    const [showMoreState, setShowMoreState] = useState(true);\n    const [validate, setValidate] = useState(false);\n    const errors = useSelector(state => state.valErrors);\n\n    const setErrors = (obj) => {\n        dispatch(setValidationErrors(obj))\n    }\n\n    const [formData, setFormData] = useState({\n        name: \"\",\n        image: \"\",\n        price: \"\",\n        healthScore: \"\",\n        summary: \"\",\n        stepByStep: \"\",\n        diet: [],\n    });\n\n    const showMore = (e) => {\n        e.preventDefault();\n        setShowMoreState(!showMoreState);\n    }\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        Validations({...formData, [name]: value}, errors, setErrors);\n        setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        createRecipe(formData);\n    }\n\n    const createRecipe = async (obj) => {\n        await axios.post(URL_END, obj);\n        props.setIsCreated(true);\n    }\n\n    const spacedWords = { Vegetarian: 'lacto ovo vegetarian', Fodmap: 'fodmap friendly', Gluten: 'gluten free', Dairy: 'dairy free', Whole30: 'whole 30' }\n\n    const [selectedDiets, setSelectedDiets] = useState({});\n\n    const handleDietsFilter = (event) => {\n        const diet = event.target.value;\n        const isChecked = event.target.checked;\n\n        setSelectedDiets((prevSelectedDiets) => ({\n            ...prevSelectedDiets,\n            [diet]: isChecked\n        }));\n    };\n\n    useEffect(() => {\n        for (let diet in selectedDiets) {\n            if (selectedDiets[diet]) {\n                !formData.diet.includes(diet) && setFormData({\n                    ...formData,\n                    diet: [...formData.diet, diet]\n                })\n            }\n            else {\n                formData.diet.length && setFormData({\n                    ...formData,\n                    diet: formData.diet.filter(d => d != diet)\n                });\n            }\n        };\n    }, [selectedDiets]);\n\n    useEffect(() => {\n        if (formData.name.length && formData.summary.length && formData.healthScore.length && formData.price.length && formData.diet.length && Object.values(errors).every((error) => error.length === 0)) {\n            setValidate(true);\n        }\n        else if (validate === true) {\n            setValidate(false);\n        }\n    }, [formData]);\n\n    return (\n        <div className={props.isCreated ? style.hide : style.container}>\n            <div className={style.generalBack}>\n                <div className={style.title}>\n                    <h1 className={style.h1}>Create Your Recipe:</h1>\n                    <div className={style.separator}></div>\n                    <div className={`${style.separator} ${style.separator_style}`}></div>\n                </div>\n                <form className={style.form}>\n                    <div className={style.containerInput}>\n                        <div className={style.inputGenCont}>\n                            <input className={`${style.input} ${style.inputGen}`} type=\"text\" name='name' onChange={handleInputChange} placeholder='Name...' />\n                            {formData.name.length && errors.name ? <p className={style.error}>{errors.name}</p> : ''}\n                        </div>\n                        <div className={style.inputGenCont}>\n                            <input className={`${style.input} ${style.inputGen}`} type=\"text\" name='image' onChange={handleInputChange}placeholder='Image...' />\n                            {formData.image.length && errors.image ? <p className={style.error}>{errors.image}</p> : ''}\n                        </div>\n                    </div>\n                    <div className={style.containerInput}>   \n                        <div className={style.inputGenCont}>\n                            <input className={`${style.input} ${style.inputGen}`} type=\"text\" name='price' onChange={handleInputChange}placeholder='Price Per Unity...' />\n                            {formData.price.length && errors.price ? <p className={style.error}>{errors.price}</p> : ''}\n                        </div>\n                        <div className={style.inputGenCont}>\n                            <input className={`${style.input} ${style.inputGen}`} type=\"text\" name='healthScore' onChange={handleInputChange}placeholder='Health Score...' />\n                            {formData.healthScore.length && errors.healthScore ? <p className={style.error}>{errors.healthScore}</p> : ''}\n                        </div>\n                    </div>\n                    <div className={style.inputGenCont}>\n                        <input className={`${style.input2} ${style.inputGen}`} type=\"text\" name='summary' onChange={handleInputChange}placeholder='Summary...' />\n                        {formData.summary.length && errors.summary ? <p className={style.error}>{errors.summary}</p> : ''}\n                    </div>  \n                    <button className={style.btn} onClick={showMore}>\n                        <span className={`${style.text} ${style.text_1}`}>Select Diets<i class='bx bxs-down-arrow-square'></i></span>\n                        <span className={`${style.text} ${style.text_2}`}>Select Diets<i class='bx bxs-down-arrow-square'></i></span>\n                    </button>\n                    <div className={style.inputDietsCont}>\n                        <div className={ showMoreState ? style.dietsCont : `${style.dietsCont} ${style.show}`}>\n                            <label className={selectedDiets.vegan ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Vegan\n                                <input className={style.option} type='checkbox' value=\"vegan\" onChange={handleDietsFilter}/>\n                            </label>\n                            <label className={selectedDiets[spacedWords.Vegetarian] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Vegetarian\n                                <input className={style.option} type='checkbox' value=\"lacto ovo vegetarian\" onChange={handleDietsFilter}/>\n                            </label>\n                            <label className={selectedDiets[spacedWords.Fodmap] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Fodmap F.\n                                <input className={style.option} type='checkbox' value=\"fodmap friendly\" onChange={handleDietsFilter}/>\n                            </label>\n                            <label className={selectedDiets.ketogenic ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Ketogenic\n                                <input className={style.option} type='checkbox' value=\"ketogenic\" onChange={handleDietsFilter}/>\n                            </label>\n                            <label className={selectedDiets[spacedWords.Gluten] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Gluten Free\n                                <input className={style.option} type='checkbox' value=\"gluten free\" onChange={handleDietsFilter}/>\n                            </label>\n                            <label className={selectedDiets[spacedWords.Dairy] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Dairy Free\n                                <input className={style.option} type='checkbox' value=\"dairy free\" onChange={handleDietsFilter}/>\n                            </label>\n                            <label className={selectedDiets.paleolithic ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Paleolithic\n                                <input className={style.option} type='checkbox' value=\"paleolithic\" onChange={handleDietsFilter}/>\n                            </label>\n                            <label className={selectedDiets.primal ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Primal\n                                <input className={style.option} type='checkbox' value=\"primal\" onChange={handleDietsFilter}/>\n                            </label>\n                            <label className={selectedDiets[spacedWords.Whole30] ? `${style.checkLabel} ${style.checkedLabel}` : style.checkLabel}>Whole30\n                                <input className={style.option} type='checkbox' value=\"whole 30\" onChange={handleDietsFilter}/>\n                            </label>\n                        </div>\n                    </div>\n\n                    <div className={style.inputTextCont}>\n                        <textarea className={`${style.textarea} ${style.inputGen}`} name=\"stepByStep\" cols=\"30\" rows=\"10\" onChange={handleInputChange} placeholder='Step By Step'></textarea>\n                        {formData.stepByStep.length && errors.stepByStep ? <p className={style.error}>{errors.stepByStep}</p> : ''}\n                    </div>\n                    <button className={validate ? style.btn : `${style.btn} ${style.btnHide}`} onClick={handleSubmit}>\n                        <span className={`${style.text} ${style.text_1}`}>Send Recipe</span>\n                        <span className={`${style.text} ${style.text_2}`}>Send Recipe</span>\n                    </button>\n                </form>\n            </div>\n        </div>\n    )\n}","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/PopUp/PopUp.jsx",["116"],"import React from \"react\"\nimport style from './PopUp.module.css'\nimport image from '../../images/check.png'\n\n\nexport default function PopUp (props) {\n\n\n    return (\n        <div className={style.container}>\n            <h1 className={style.h1}>Your Recipe Was Succesfully Created</h1>\n            <img className={style.image} src={image} />\n            <div className={style.separator}></div>\n            <button className={style.btn} onClick={props.onClose}>Continue</button>\n        </div>\n    )\n}","/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":82,"column":34,"nodeType":"123","messageId":"124","endLine":82,"endColumn":36},{"ruleId":"121","severity":1,"message":"122","line":90,"column":34,"nodeType":"123","messageId":"124","endLine":90,"endColumn":36},{"ruleId":"125","severity":1,"message":"126","line":99,"column":7,"nodeType":"127","messageId":"128","endLine":106,"endColumn":11},{"ruleId":"125","severity":1,"message":"126","line":153,"column":7,"nodeType":"127","messageId":"128","endLine":161,"endColumn":11},{"ruleId":"129","severity":1,"message":"130","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":17},{"ruleId":"129","severity":1,"message":"133","line":4,"column":8,"nodeType":"131","messageId":"132","endLine":4,"endColumn":13},{"ruleId":"134","severity":1,"message":"135","line":45,"column":25,"nodeType":"136","endLine":45,"endColumn":94},{"ruleId":"134","severity":1,"message":"135","line":56,"column":25,"nodeType":"136","endLine":56,"endColumn":94},{"ruleId":"134","severity":1,"message":"135","line":67,"column":25,"nodeType":"136","endLine":67,"endColumn":94},{"ruleId":"134","severity":1,"message":"135","line":78,"column":25,"nodeType":"136","endLine":78,"endColumn":94},{"ruleId":"134","severity":1,"message":"135","line":89,"column":25,"nodeType":"136","endLine":89,"endColumn":94},{"ruleId":"134","severity":1,"message":"135","line":100,"column":25,"nodeType":"136","endLine":100,"endColumn":94},{"ruleId":"137","severity":1,"message":"138","line":39,"column":9,"nodeType":"136","endLine":39,"endColumn":44},{"ruleId":"137","severity":1,"message":"139","line":43,"column":17,"nodeType":"136","endLine":43,"endColumn":78},{"ruleId":"137","severity":1,"message":"139","line":47,"column":17,"nodeType":"136","endLine":47,"endColumn":87},{"ruleId":"137","severity":1,"message":"139","line":51,"column":17,"nodeType":"136","endLine":51,"endColumn":79},{"ruleId":"137","severity":1,"message":"139","line":60,"column":9,"nodeType":"136","endLine":60,"endColumn":61},{"ruleId":"140","severity":1,"message":"141","line":118,"column":8,"nodeType":"142","endLine":118,"endColumn":23,"suggestions":"143"},{"ruleId":"134","severity":1,"message":"135","line":288,"column":17,"nodeType":"136","endLine":288,"endColumn":71},{"ruleId":"137","severity":1,"message":"138","line":17,"column":42,"nodeType":"136","endLine":17,"endColumn":53},{"ruleId":"137","severity":1,"message":"138","line":18,"column":42,"nodeType":"136","endLine":18,"endColumn":53},{"ruleId":"137","severity":1,"message":"138","line":19,"column":42,"nodeType":"136","endLine":19,"endColumn":53},{"ruleId":"137","severity":1,"message":"138","line":23,"column":42,"nodeType":"136","endLine":23,"endColumn":53},{"ruleId":"137","severity":1,"message":"138","line":24,"column":42,"nodeType":"136","endLine":24,"endColumn":53},{"ruleId":"137","severity":1,"message":"138","line":25,"column":42,"nodeType":"136","endLine":25,"endColumn":53},{"ruleId":"140","severity":1,"message":"144","line":23,"column":8,"nodeType":"142","endLine":23,"endColumn":18,"suggestions":"145"},{"ruleId":"134","severity":1,"message":"135","line":45,"column":17,"nodeType":"136","endLine":45,"endColumn":65},{"ruleId":"121","severity":1,"message":"146","line":76,"column":55,"nodeType":"123","messageId":"124","endLine":76,"endColumn":57},{"ruleId":"140","severity":1,"message":"147","line":80,"column":8,"nodeType":"142","endLine":80,"endColumn":23,"suggestions":"148"},{"ruleId":"140","severity":1,"message":"149","line":89,"column":8,"nodeType":"142","endLine":89,"endColumn":18,"suggestions":"150"},{"ruleId":"134","severity":1,"message":"135","line":12,"column":13,"nodeType":"136","endLine":12,"endColumn":56},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-unused-vars","'Variables' is defined but never used.","Identifier","unusedVar","'image' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setDietsFilter'. Either include it or remove the dependency array.","ArrayExpression",["153"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["154"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["155"],"React Hook useEffect has missing dependencies: 'errors' and 'validate'. Either include them or remove the dependency array.",["156"],"no-global-assign","no-unsafe-negation",{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [selectedDiets, setDietsFilter]",{"range":"165","text":"166"},"Update the dependencies array to be: [dispatch, id]",{"range":"167","text":"168"},"Update the dependencies array to be: [formData, selectedDiets]",{"range":"169","text":"170"},"Update the dependencies array to be: [errors, formData, validate]",{"range":"171","text":"172"},[3501,3516],"[selectedDiets, setDietsFilter]",[796,806],"[dispatch, id]",[2412,2427],"[formData, selectedDiets]",[2786,2796],"[errors, formData, validate]"]