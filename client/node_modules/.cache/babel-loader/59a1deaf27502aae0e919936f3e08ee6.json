{"ast":null,"code":"export default function Validations(type, errors, setErrors) {\n  const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n  const validateName = /^[a-zA-Z\\s]*$/;\n  const validateNumber = /^\\d*$/;\n  const validateNumberFloat = /^\\d+(\\.\\d+)*$/;\n\n  // Recipe Name Validation:\n\n  if (type.name.length) {\n    console.log('entro name');\n    if (type.name.length > 30) {\n      setErrors({\n        name: \"* The title must have at most 30 characters\"\n      });\n    } else if (validateName.test(type.name) === false) {\n      setErrors({\n        name: \"* The title can only contain letters\"\n      });\n    } else {\n      setErrors({\n        name: \"\"\n      });\n    }\n  }\n\n  // Recipe Price Validation:\n\n  if (type.price.length) {\n    if (validateNumberFloat.test(type.price) === false) {\n      setErrors({\n        price: \"* The price can only contain numbers\"\n      });\n    } else if (type.price.length > 9) {\n      setErrors({\n        price: \"* The price is too big\"\n      });\n    } else {\n      setErrors({\n        price: \"\"\n      });\n    }\n  }\n\n  // Recipe Image Validation:\n\n  if (type.image.length) {\n    if (validateURL.test(type.image) === false) {\n      setErrors({\n        image: \"* The image url its invalid\"\n      });\n    } else {\n      setErrors({\n        image: \"\"\n      });\n    }\n  }\n\n  // Recipe Health Score Validation:\n\n  if (type.healthScore.length) {\n    if (validateNumber.test(type.healthScore) === false) {\n      setErrors({\n        healthScore: \"* The Health Score can only contain numbers\"\n      });\n    } else if (type.healthScore > 100) {\n      setErrors({\n        healthScore: \"* The Health Score is too much\"\n      });\n    } else {\n      setErrors({\n        healthScore: \"\"\n      });\n    }\n  }\n\n  // Recipe Summary Validation:\n\n  if (type.summary.length) {\n    if (type.summary.length > 80) {\n      setErrors({\n        summary: \"* The summary must have at most 80 characters\"\n      });\n    } else {\n      setErrors({\n        summary: \"\"\n      });\n    }\n  }\n\n  // Recipe Step By Step Validation:\n\n  if (type.stepByStep.length) {\n    if (type.stepByStep.length > 620) {\n      setErrors({\n        stepByStep: \"* The step by step must have at most 620 characters\"\n      });\n    } else {\n      setErrors({\n        stepByStep: \"\"\n      });\n    }\n  }\n}\n_c = Validations;\nvar _c;\n$RefreshReg$(_c, \"Validations\");","map":{"version":3,"names":["Validations","type","errors","setErrors","validateURL","validateName","validateNumber","validateNumberFloat","name","length","console","log","test","price","image","healthScore","summary","stepByStep","_c","$RefreshReg$"],"sources":["/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations.js"],"sourcesContent":["    export default function Validations (type, errors, setErrors) {\n      const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n      const validateName = /^[a-zA-Z\\s]*$/;\n      const validateNumber = /^\\d*$/;\n      const validateNumberFloat = /^\\d+(\\.\\d+)*$/;\n\n      // Recipe Name Validation:\n\n      if (type.name.length) {\n        console.log('entro name')\n\n        if (type.name.length > 30) {\n          setErrors({\n            name: \"* The title must have at most 30 characters\",\n          });\n        } else if (validateName.test(type.name) === false) {\n          setErrors({\n            name: \"* The title can only contain letters\",\n          });\n        } else {\n          setErrors({\n            name: \"\",\n          });\n        }\n      }\n\n      // Recipe Price Validation:\n\n      if (type.price.length) {\n        if (validateNumberFloat.test(type.price) === false) {\n          setErrors({\n            price: \"* The price can only contain numbers\",\n          });\n        } else if (type.price.length > 9) {\n          setErrors({\n            price: \"* The price is too big\",\n          });\n        } else {\n          setErrors({\n            price: \"\",\n          });\n        }\n      }\n\n      // Recipe Image Validation:\n\n      if (type.image.length) {\n        if (validateURL.test(type.image) === false) {\n          setErrors({\n            image: \"* The image url its invalid\",\n          });\n        } else {\n          setErrors({\n            image: \"\",\n          });\n        }\n      }\n\n      // Recipe Health Score Validation:\n\n      if (type.healthScore.length) {\n        if (validateNumber.test(type.healthScore) === false) {\n          setErrors({\n            healthScore: \"* The Health Score can only contain numbers\",\n          });\n        } else if (type.healthScore > 100) {\n          setErrors({\n            healthScore: \"* The Health Score is too much\",\n          });\n        } else {\n          setErrors({\n            healthScore: \"\",\n          });\n        }\n      }\n\n      // Recipe Summary Validation:\n\n      if (type.summary.length) {\n        if (type.summary.length > 80) {\n          setErrors({\n            summary: \"* The summary must have at most 80 characters\",\n          });\n        } else {\n          setErrors({\n            summary: \"\",\n          });\n        }\n      }\n\n      // Recipe Step By Step Validation:\n\n      if (type.stepByStep.length) {\n        if (type.stepByStep.length > 620) {\n          setErrors({\n            stepByStep: \"* The step by step must have at most 620 characters\",\n          });\n        } else {\n          setErrors({\n            stepByStep: \"\",\n          });\n        }\n      }\n    }"],"mappings":"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"},"metadata":{},"sourceType":"module"}