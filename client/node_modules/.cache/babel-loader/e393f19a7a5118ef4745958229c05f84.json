{"ast":null,"code":"const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\nconst validateName = /^[a-zA-Z\\s]*$/;\nconst validateNumber = /^\\d*$/;\nexport function Name(type, errors, setErrors) {\n  // Recipe Name Validation:\n\n  if (type.name.length) {\n    console.log('entro name');\n    if (type.name.length > 30) {\n      console.log(typeof type.name === \"string\");\n      setErrors({\n        ...errors,\n        name: \"* The title must have at most 30 characters\"\n      });\n    } else if (validateName.test(type.name) === false) {\n      setErrors({\n        ...errors,\n        name: \"* The title can only contain letters\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        name: \"\"\n      });\n    }\n  }\n\n  // Recipe Price Validation:\n\n  if (type.price.length) {\n    console.log(\"entro price\");\n    if (validateNumber.test(type.price) === false) {\n      setErrors({\n        ...errors,\n        price: \"* The price can only contain numbers\"\n      });\n    } else if (type.price.length > 9) {\n      setErrors({\n        ...errors,\n        price: \"* The price is too big\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        price: \"\"\n      });\n    }\n  }\n\n  // Recipe Image Validation:\n\n  if (type.image.length) {\n    console.log(\"entro image\");\n    if (validateURL.test(type.image) === false) {\n      setErrors({\n        ...errors,\n        image: \"* The image url its invalid\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        image: \"\"\n      });\n    }\n  }\n\n  // Recipe Health Score Validation:\n\n  if (type.healthScore.length) {\n    console.log(\"entro health\");\n    if (validateNumber.test(type.healthScore) === false) {\n      setErrors({\n        ...errors,\n        healthScore: \"* The Health Score can only contain numbers\"\n      });\n    } else if (type.healthScore > 100) {\n      setErrors({\n        ...errors,\n        healthScore: \"* The Health Score is too much\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        healthScore: \"\"\n      });\n    }\n  }\n\n  // Recipe Summary Validation:\n\n  if (type.summary.length) {\n    console.log(\"entro summary\");\n    if (type.summary.length > 80) {\n      setErrors({\n        ...errors,\n        summary: \"* The summary must have at most 80 characters\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        summary: \"\"\n      });\n    }\n  }\n\n  // Recipe Step By Step Validation:\n\n  if (type.stepByStep.length) {\n    console.log(\"entro step\");\n    if (type.stepByStep.length > 620) {\n      setErrors({\n        ...errors,\n        stepByStep: \"* The step by step must have at most 620 characters\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        stepByStep: \"\"\n      });\n    }\n  }\n}\n_c = Name;\nvar _c;\n$RefreshReg$(_c, \"Name\");","map":{"version":3,"names":["validateURL","validateName","validateNumber","Name","type","errors","setErrors","name","length","console","log","test","price","image","healthScore","summary","stepByStep","_c","$RefreshReg$"],"sources":["/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations/Validations.js"],"sourcesContent":["const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\nconst validateName = /^[a-zA-Z\\s]*$/;\nconst validateNumber = /^\\d*$/;\n    \n    export function Name (type, errors, setErrors) {\n      // Recipe Name Validation:\n\n      if (type.name.length) {\n        console.log('entro name')\n\n        if (type.name.length > 30) {\n          console.log(typeof type.name === \"string\");\n          setErrors({\n            ...errors,\n            name: \"* The title must have at most 30 characters\",\n          });\n        } else if (validateName.test(type.name) === false) {\n          setErrors({\n            ...errors,\n            name: \"* The title can only contain letters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            name: \"\",\n          });\n        }\n      }\n\n      // Recipe Price Validation:\n\n      if (type.price.length) {\n        console.log(\"entro price\");\n\n        if (validateNumber.test(type.price) === false) {\n          setErrors({\n            ...errors,\n            price: \"* The price can only contain numbers\",\n          });\n        } else if (type.price.length > 9) {\n          setErrors({\n            ...errors,\n            price: \"* The price is too big\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            price: \"\",\n          });\n        }\n      }\n\n      // Recipe Image Validation:\n\n      if (type.image.length) {\n        console.log(\"entro image\");\n\n        if (validateURL.test(type.image) === false) {\n          setErrors({\n            ...errors,\n            image: \"* The image url its invalid\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            image: \"\",\n          });\n        }\n      }\n\n      // Recipe Health Score Validation:\n\n      if (type.healthScore.length) {\n        console.log(\"entro health\");\n\n        if (validateNumber.test(type.healthScore) === false) {\n          setErrors({\n            ...errors,\n            healthScore: \"* The Health Score can only contain numbers\",\n          });\n        } else if (type.healthScore > 100) {\n          setErrors({\n            ...errors,\n            healthScore: \"* The Health Score is too much\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            healthScore: \"\",\n          });\n        }\n      }\n\n      // Recipe Summary Validation:\n\n      if (type.summary.length) {\n        console.log(\"entro summary\");\n\n        if (type.summary.length > 80) {\n          setErrors({\n            ...errors,\n            summary: \"* The summary must have at most 80 characters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            summary: \"\",\n          });\n        }\n      }\n\n      // Recipe Step By Step Validation:\n\n      if (type.stepByStep.length) {\n        console.log(\"entro step\");\n\n        if (type.stepByStep.length > 620) {\n          setErrors({\n            ...errors,\n            stepByStep: \"* The step by step must have at most 620 characters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            stepByStep: \"\",\n          });\n        }\n      }\n    }"],"mappings":"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"},"metadata":{},"sourceType":"module"}