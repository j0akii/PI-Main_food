{"ast":null,"code":"const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\nconst validateName = /^[a-zA-Z\\s]*$/;\nconst validateNumber = /^\\d*$/;\nfunction name(type, errors, setErrors) {\n  // Recipe Name Validation:\n\n  if (type.name.length) {\n    console.log('entro name');\n    if (type.name.length > 30) {\n      console.log(typeof type.name === \"string\");\n      setErrors({\n        ...errors,\n        name: \"* The title must have at most 30 characters\"\n      });\n    } else if (validateName.test(type.name) === false) {\n      setErrors({\n        ...errors,\n        name: \"* The title can only contain letters\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        name: \"\"\n      });\n    }\n  }\n}\nfunction price(type, errors, setErrors) {\n  // Recipe Price Validation:\n\n  if (type.price.length) {\n    console.log(\"entro price\");\n    if (validateNumber.test(type.price) === false) {\n      setErrors({\n        ...errors,\n        price: \"* The price can only contain numbers\"\n      });\n    } else if (type.price.length > 9) {\n      setErrors({\n        ...errors,\n        price: \"* The price is too big\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        price: \"\"\n      });\n    }\n  }\n}\n\n// // Recipe Image Validation:\n\n// if (type.image.length) {\n//   console.log(\"entro image\");\n\n//   if (validateURL.test(type.image) === false) {\n//     setErrors({\n//       ...errors,\n//       image: \"* The image url its invalid\",\n//     });\n//   } else {\n//     setErrors({\n//       ...errors,\n//       image: \"\",\n//     });\n//   }\n// }\n\n// // Recipe Health Score Validation:\n\n// if (type.healthScore.length) {\n//   console.log(\"entro health\");\n\n//   if (validateNumber.test(type.healthScore) === false) {\n//     setErrors({\n//       ...errors,\n//       healthScore: \"* The Health Score can only contain numbers\",\n//     });\n//   } else if (type.healthScore > 100) {\n//     setErrors({\n//       ...errors,\n//       healthScore: \"* The Health Score is too much\",\n//     });\n//   } else {\n//     setErrors({\n//       ...errors,\n//       healthScore: \"\",\n//     });\n//   }\n// }\n\n// // Recipe Summary Validation:\n\n// if (type.summary.length) {\n//   console.log(\"entro summary\");\n\n//   if (type.summary.length > 80) {\n//     setErrors({\n//       ...errors,\n//       summary: \"* The summary must have at most 80 characters\",\n//     });\n//   } else {\n//     setErrors({\n//       ...errors,\n//       summary: \"\",\n//     });\n//   }\n// }\n\n// // Recipe Step By Step Validation:\n\n// if (type.stepByStep.length) {\n//   console.log(\"entro step\");\n\n//   if (type.stepByStep.length > 620) {\n//     setErrors({\n//       ...errors,\n//       stepByStep: \"* The step by step must have at most 620 characters\",\n//     });\n//   } else {\n//     setErrors({\n//       ...errors,\n//       stepByStep: \"\",\n//     });\n//   }\n// }\n\nexport default {\n  name,\n  price\n};","map":{"version":3,"names":["validateURL","validateName","validateNumber","name","type","errors","setErrors","length","console","log","test","price"],"sources":["/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations.js"],"sourcesContent":["const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\nconst validateName = /^[a-zA-Z\\s]*$/;\nconst validateNumber = /^\\d*$/;\n    \n    function name (type, errors, setErrors) {\n      // Recipe Name Validation:\n\n      if (type.name.length) {\n        console.log('entro name')\n\n        if (type.name.length > 30) {\n          console.log(typeof type.name === \"string\");\n          setErrors({\n            ...errors,\n            name: \"* The title must have at most 30 characters\",\n          });\n        } else if (validateName.test(type.name) === false) {\n          setErrors({\n            ...errors,\n            name: \"* The title can only contain letters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            name: \"\",\n          });\n        }\n      }\n    }\n\n    function price (type, errors, setErrors) {\n      // Recipe Price Validation:\n\n      if (type.price.length) {\n        console.log(\"entro price\");\n\n        if (validateNumber.test(type.price) === false) {\n          setErrors({\n            ...errors,\n            price: \"* The price can only contain numbers\",\n          });\n        } else if (type.price.length > 9) {\n          setErrors({\n            ...errors,\n            price: \"* The price is too big\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            price: \"\",\n          });\n        }\n      }\n    }\n\n\n\n      // // Recipe Image Validation:\n\n      // if (type.image.length) {\n      //   console.log(\"entro image\");\n\n      //   if (validateURL.test(type.image) === false) {\n      //     setErrors({\n      //       ...errors,\n      //       image: \"* The image url its invalid\",\n      //     });\n      //   } else {\n      //     setErrors({\n      //       ...errors,\n      //       image: \"\",\n      //     });\n      //   }\n      // }\n\n      // // Recipe Health Score Validation:\n\n      // if (type.healthScore.length) {\n      //   console.log(\"entro health\");\n\n      //   if (validateNumber.test(type.healthScore) === false) {\n      //     setErrors({\n      //       ...errors,\n      //       healthScore: \"* The Health Score can only contain numbers\",\n      //     });\n      //   } else if (type.healthScore > 100) {\n      //     setErrors({\n      //       ...errors,\n      //       healthScore: \"* The Health Score is too much\",\n      //     });\n      //   } else {\n      //     setErrors({\n      //       ...errors,\n      //       healthScore: \"\",\n      //     });\n      //   }\n      // }\n\n      // // Recipe Summary Validation:\n\n      // if (type.summary.length) {\n      //   console.log(\"entro summary\");\n\n      //   if (type.summary.length > 80) {\n      //     setErrors({\n      //       ...errors,\n      //       summary: \"* The summary must have at most 80 characters\",\n      //     });\n      //   } else {\n      //     setErrors({\n      //       ...errors,\n      //       summary: \"\",\n      //     });\n      //   }\n      // }\n\n      // // Recipe Step By Step Validation:\n\n      // if (type.stepByStep.length) {\n      //   console.log(\"entro step\");\n\n      //   if (type.stepByStep.length > 620) {\n      //     setErrors({\n      //       ...errors,\n      //       stepByStep: \"* The step by step must have at most 620 characters\",\n      //     });\n      //   } else {\n      //     setErrors({\n      //       ...errors,\n      //       stepByStep: \"\",\n      //     });\n      //   }\n      // }\n\nexport default {\n  name,\n  price,\n}"],"mappings":"AAAA,MAAMA,WAAW,GAAG,+BAA+B;AACnD,MAAMC,YAAY,GAAG,eAAe;AACpC,MAAMC,cAAc,GAAG,OAAO;AAE1B,SAASC,IAAIA,CAAEC,IAAI,EAAEC,MAAM,EAAEC,SAAS,EAAE;EACtC;;EAEA,IAAIF,IAAI,CAACD,IAAI,CAACI,MAAM,EAAE;IACpBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;IAEzB,IAAIL,IAAI,CAACD,IAAI,CAACI,MAAM,GAAG,EAAE,EAAE;MACzBC,OAAO,CAACC,GAAG,CAAC,OAAOL,IAAI,CAACD,IAAI,KAAK,QAAQ,CAAC;MAC1CG,SAAS,CAAC;QACR,GAAGD,MAAM;QACTF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIF,YAAY,CAACS,IAAI,CAACN,IAAI,CAACD,IAAI,CAAC,KAAK,KAAK,EAAE;MACjDG,SAAS,CAAC;QACR,GAAGD,MAAM;QACTF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,MAAM;MACLG,SAAS,CAAC;QACR,GAAGD,MAAM;QACTF,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACF;AACF;AAEA,SAASQ,KAAKA,CAAEP,IAAI,EAAEC,MAAM,EAAEC,SAAS,EAAE;EACvC;;EAEA,IAAIF,IAAI,CAACO,KAAK,CAACJ,MAAM,EAAE;IACrBC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAE1B,IAAIP,cAAc,CAACQ,IAAI,CAACN,IAAI,CAACO,KAAK,CAAC,KAAK,KAAK,EAAE;MAC7CL,SAAS,CAAC;QACR,GAAGD,MAAM;QACTM,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIP,IAAI,CAACO,KAAK,CAACJ,MAAM,GAAG,CAAC,EAAE;MAChCD,SAAS,CAAC;QACR,GAAGD,MAAM;QACTM,KAAK,EAAE;MACT,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,SAAS,CAAC;QACR,GAAGD,MAAM;QACTM,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;EACF;AACF;;AAIE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEN,eAAe;EACbR,IAAI;EACJQ;AACF,CAAC"},"metadata":{},"sourceType":"module"}