{"ast":null,"code":"export default function Validations(type, errors, setErrors) {\n  const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n  const validateNick = /^[A-Za-z]+$/;\n\n  // Recipe Name Validation:\n  if (type.name.length) {\n    console.log(validateNick.test(type.name));\n    if (type.name.length > 30) {\n      console.log(typeof type.name === \"string\");\n      setErrors({\n        ...errors,\n        name: \"The title must have at most 30 characters\"\n      });\n    }\n    if (!validateNick.test(type.name)) {\n      setErrors({\n        ...errors,\n        name: \"The title can only contain letters\"\n      });\n    } else if (type.name.length < validateNick.test(type.name)) {\n      setErrors({\n        ...errors,\n        name: \"\"\n      });\n    }\n  }\n\n  // // Recipe Price Validation:\n\n  // if (type.price.length > 9) {\n  //     setErrors({\n  //         ...errors,\n  //         price: \"The price is too big\",\n  //     });\n  // }\n  // if (typeof type.price !== 'number') {\n  //     setErrors({ \n  //         ...errors,\n  //         price: \"The price can only contain numbers\"\n  //     });\n  // }\n  // if (type.price.length < 9 && typeof type.price === 'number') {\n  //     setErrors({ \n  //         ...errors,\n  //         price: \"\"\n  //     });\n  // }\n\n  // // Recipe Image Validation:\n\n  // if (type.image) {\n  //     const isValid = validateURL(type.image.value)\n  //     if (isValid === false) {\n  //         setErrors({ \n  //             ...errors,\n  //             image: \"The image url its invalid\"\n  //         });\n  //     }\n  //     else {\n  //         setErrors({ \n  //             ...errors,\n  //             image: \"\"\n  //         });\n  //     }\n  // }\n\n  // // Recipe Health Score Validation:\n\n  //     if (typeof type.healthScore !== \"number\") {\n  //       setErrors({\n  //         ...errors,\n  //         healthScore: \"The Health Score can only contain numbers\",\n  //       });\n  //     }\n  //     if (type.healthScore.value > 100) {\n  //       setErrors({\n  //         ...errors,\n  //         healthScore: \"The Health Score is too much\",\n  //       });\n  //     }\n  //     if (type.healthScore.value < 100 && typeof type.healthScore === \"number\") {\n  //       setErrors({\n  //         ...errors,\n  //         healthScore: \"\",\n  //       });\n  //     }\n}\n_c = Validations;\nvar _c;\n$RefreshReg$(_c, \"Validations\");","map":{"version":3,"names":["Validations","type","errors","setErrors","validateURL","validateNick","name","length","console","log","test","_c","$RefreshReg$"],"sources":["/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations.js"],"sourcesContent":["    export default function Validations (type, errors, setErrors) {\n    const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n    const validateNick = /^[A-Za-z]+$/;\n\n    // Recipe Name Validation:\n    if (type.name.length) {\n        console.log(validateNick.test(type.name));\n        if (type.name.length > 30) {\n        console.log(typeof type.name === \"string\");\n            setErrors({\n                ...errors,\n                name: \"The title must have at most 30 characters\",\n            });\n        }\n        if (!validateNick.test(type.name)) {\n            setErrors({\n                ...errors,\n                name: \"The title can only contain letters\",\n            });\n        }\n        else if (type.name.length < validateNick.test(type.name)) {\n          setErrors({\n            ...errors,\n            name: \"\",\n          });\n        }\n    }\n\n    // // Recipe Price Validation:\n\n    // if (type.price.length > 9) {\n    //     setErrors({\n    //         ...errors,\n    //         price: \"The price is too big\",\n    //     });\n    // }\n    // if (typeof type.price !== 'number') {\n    //     setErrors({ \n    //         ...errors,\n    //         price: \"The price can only contain numbers\"\n    //     });\n    // }\n    // if (type.price.length < 9 && typeof type.price === 'number') {\n    //     setErrors({ \n    //         ...errors,\n    //         price: \"\"\n    //     });\n    // }\n\n    // // Recipe Image Validation:\n\n    // if (type.image) {\n    //     const isValid = validateURL(type.image.value)\n    //     if (isValid === false) {\n    //         setErrors({ \n    //             ...errors,\n    //             image: \"The image url its invalid\"\n    //         });\n    //     }\n    //     else {\n    //         setErrors({ \n    //             ...errors,\n    //             image: \"\"\n    //         });\n    //     }\n    // }\n\n    // // Recipe Health Score Validation:\n\n    //     if (typeof type.healthScore !== \"number\") {\n    //       setErrors({\n    //         ...errors,\n    //         healthScore: \"The Health Score can only contain numbers\",\n    //       });\n    //     }\n    //     if (type.healthScore.value > 100) {\n    //       setErrors({\n    //         ...errors,\n    //         healthScore: \"The Health Score is too much\",\n    //       });\n    //     }\n    //     if (type.healthScore.value < 100 && typeof type.healthScore === \"number\") {\n    //       setErrors({\n    //         ...errors,\n    //         healthScore: \"\",\n    //       });\n    //     }\n}"],"mappings":"AAAI,eAAe,SAASA,WAAWA,CAAEC,IAAI,EAAEC,MAAM,EAAEC,SAAS,EAAE;EAC9D,MAAMC,WAAW,GAAG,+BAA+B;EACnD,MAAMC,YAAY,GAAG,aAAa;;EAElC;EACA,IAAIJ,IAAI,CAACK,IAAI,CAACC,MAAM,EAAE;IAClBC,OAAO,CAACC,GAAG,CAACJ,YAAY,CAACK,IAAI,CAACT,IAAI,CAACK,IAAI,CAAC,CAAC;IACzC,IAAIL,IAAI,CAACK,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;MAC3BC,OAAO,CAACC,GAAG,CAAC,OAAOR,IAAI,CAACK,IAAI,KAAK,QAAQ,CAAC;MACtCH,SAAS,CAAC;QACN,GAAGD,MAAM;QACTI,IAAI,EAAE;MACV,CAAC,CAAC;IACN;IACA,IAAI,CAACD,YAAY,CAACK,IAAI,CAACT,IAAI,CAACK,IAAI,CAAC,EAAE;MAC/BH,SAAS,CAAC;QACN,GAAGD,MAAM;QACTI,IAAI,EAAE;MACV,CAAC,CAAC;IACN,CAAC,MACI,IAAIL,IAAI,CAACK,IAAI,CAACC,MAAM,GAAGF,YAAY,CAACK,IAAI,CAACT,IAAI,CAACK,IAAI,CAAC,EAAE;MACxDH,SAAS,CAAC;QACR,GAAGD,MAAM;QACTI,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;EACJ;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAACK,EAAA,GAvF2BX,WAAW;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}