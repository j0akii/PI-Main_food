{"ast":null,"code":"import validate from \"../../../../../App-RickYMorty/client/rick_and_morty/src/components/Form/validations\";\nexport default function Validations(type, errors, setErrors) {\n  const validateURL = url => {\n    return /^(ftp|http|https):\\/\\/[^ \"]+$/.test(url);\n  };\n  const validateNick = /^[a-zA-Z\\s]$/;\n\n  // Recipe Name Validation:\n\n  if (type.name.length > 30) {\n    console.log(typeof type.name === \"string\");\n    setErrors({\n      ...errors,\n      name: \"The title must have at most 30 characters\"\n    });\n  }\n  if (!validateNick.test(type.name)) {\n    setErrors({\n      ...errors,\n      name: \"The title can only contain letters\"\n    });\n  }\n  if (type.name.length < 30 && typeof type.name === 'string') {\n    setErrors({\n      ...errors,\n      name: \"\"\n    });\n  }\n\n  // // Recipe Price Validation:\n\n  // if (type.price.length > 9) {\n  //     setErrors({\n  //         ...errors,\n  //         price: \"The price is too big\",\n  //     });\n  // }\n  // if (typeof type.price !== 'number') {\n  //     setErrors({ \n  //         ...errors,\n  //         price: \"The price can only contain numbers\"\n  //     });\n  // }\n  // if (type.price.length < 9 && typeof type.price === 'number') {\n  //     setErrors({ \n  //         ...errors,\n  //         price: \"\"\n  //     });\n  // }\n\n  // // Recipe Image Validation:\n\n  // if (type.image) {\n  //     const isValid = validateURL(type.image.value)\n  //     if (isValid === false) {\n  //         setErrors({ \n  //             ...errors,\n  //             image: \"The image url its invalid\"\n  //         });\n  //     }\n  //     else {\n  //         setErrors({ \n  //             ...errors,\n  //             image: \"\"\n  //         });\n  //     }\n  // }\n\n  // // Recipe Health Score Validation:\n\n  //     if (typeof type.healthScore !== \"number\") {\n  //       setErrors({\n  //         ...errors,\n  //         healthScore: \"The Health Score can only contain numbers\",\n  //       });\n  //     }\n  //     if (type.healthScore.value > 100) {\n  //       setErrors({\n  //         ...errors,\n  //         healthScore: \"The Health Score is too much\",\n  //       });\n  //     }\n  //     if (type.healthScore.value < 100 && typeof type.healthScore === \"number\") {\n  //       setErrors({\n  //         ...errors,\n  //         healthScore: \"\",\n  //       });\n  //     }\n}\n_c = Validations;\nvar _c;\n$RefreshReg$(_c, \"Validations\");","map":{"version":3,"names":["validate","Validations","type","errors","setErrors","validateURL","url","test","validateNick","name","length","console","log","_c","$RefreshReg$"],"sources":["/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations.js"],"sourcesContent":["import validate from \"../../../../../App-RickYMorty/client/rick_and_morty/src/components/Form/validations\";\n\nexport default function Validations (type, errors, setErrors) {\n    const validateURL = (url) => {\n        return /^(ftp|http|https):\\/\\/[^ \"]+$/.test(url);\n    }\n    const validateNick = /^[a-zA-Z\\s]$/;\n\n    // Recipe Name Validation:\n\n    if (type.name.length > 30) {\n        console.log(typeof type.name === \"string\");\n        setErrors({\n            ...errors,\n            name: \"The title must have at most 30 characters\",\n        });\n    }\n    if (!validateNick.test(type.name)) {\n        setErrors({ \n            ...errors,\n            name: \"The title can only contain letters\"\n        });\n    }\n    if (type.name.length < 30 && typeof type.name === 'string') {\n        setErrors({ \n            ...errors,\n            name: \"\"\n        });\n    }\n\n    // // Recipe Price Validation:\n\n    // if (type.price.length > 9) {\n    //     setErrors({\n    //         ...errors,\n    //         price: \"The price is too big\",\n    //     });\n    // }\n    // if (typeof type.price !== 'number') {\n    //     setErrors({ \n    //         ...errors,\n    //         price: \"The price can only contain numbers\"\n    //     });\n    // }\n    // if (type.price.length < 9 && typeof type.price === 'number') {\n    //     setErrors({ \n    //         ...errors,\n    //         price: \"\"\n    //     });\n    // }\n\n    // // Recipe Image Validation:\n\n    // if (type.image) {\n    //     const isValid = validateURL(type.image.value)\n    //     if (isValid === false) {\n    //         setErrors({ \n    //             ...errors,\n    //             image: \"The image url its invalid\"\n    //         });\n    //     }\n    //     else {\n    //         setErrors({ \n    //             ...errors,\n    //             image: \"\"\n    //         });\n    //     }\n    // }\n\n    // // Recipe Health Score Validation:\n\n    //     if (typeof type.healthScore !== \"number\") {\n    //       setErrors({\n    //         ...errors,\n    //         healthScore: \"The Health Score can only contain numbers\",\n    //       });\n    //     }\n    //     if (type.healthScore.value > 100) {\n    //       setErrors({\n    //         ...errors,\n    //         healthScore: \"The Health Score is too much\",\n    //       });\n    //     }\n    //     if (type.healthScore.value < 100 && typeof type.healthScore === \"number\") {\n    //       setErrors({\n    //         ...errors,\n    //         healthScore: \"\",\n    //       });\n    //     }\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,qFAAqF;AAE1G,eAAe,SAASC,WAAWA,CAAEC,IAAI,EAAEC,MAAM,EAAEC,SAAS,EAAE;EAC1D,MAAMC,WAAW,GAAIC,GAAG,IAAK;IACzB,OAAO,+BAA+B,CAACC,IAAI,CAACD,GAAG,CAAC;EACpD,CAAC;EACD,MAAME,YAAY,GAAG,cAAc;;EAEnC;;EAEA,IAAIN,IAAI,CAACO,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;IACvBC,OAAO,CAACC,GAAG,CAAC,OAAOV,IAAI,CAACO,IAAI,KAAK,QAAQ,CAAC;IAC1CL,SAAS,CAAC;MACN,GAAGD,MAAM;MACTM,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA,IAAI,CAACD,YAAY,CAACD,IAAI,CAACL,IAAI,CAACO,IAAI,CAAC,EAAE;IAC/BL,SAAS,CAAC;MACN,GAAGD,MAAM;MACTM,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA,IAAIP,IAAI,CAACO,IAAI,CAACC,MAAM,GAAG,EAAE,IAAI,OAAOR,IAAI,CAACO,IAAI,KAAK,QAAQ,EAAE;IACxDL,SAAS,CAAC;MACN,GAAGD,MAAM;MACTM,IAAI,EAAE;IACV,CAAC,CAAC;EACN;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAACI,EAAA,GAvFuBZ,WAAW;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}