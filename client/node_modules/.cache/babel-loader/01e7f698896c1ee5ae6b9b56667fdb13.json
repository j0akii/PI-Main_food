{"ast":null,"code":"var reactProperty = require('react-property');\nvar utilities = require('./utilities');\n\n// https://reactjs.org/docs/uncontrolled-components.html\n// https://developer.mozilla.org/docs/Web/HTML/Attributes\nvar UNCONTROLLED_COMPONENT_ATTRIBUTES = ['checked', 'value'];\nvar UNCONTROLLED_COMPONENT_NAMES = ['input', 'select', 'textarea'];\nvar VALUE_ONLY_INPUTS = {\n  reset: true,\n  submit: true\n};\n\n/**\r\n * Converts HTML/SVG DOM attributes to React props.\r\n *\r\n * @param {object} [attributes={}] - HTML/SVG DOM attributes.\r\n * @param {string} [nodeName] - DOM node name.\r\n * @returns - React props.\r\n */\nmodule.exports = function attributesToProps(attributes, nodeName) {\n  attributes = attributes || {};\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var propName;\n  var propertyInfo;\n  var props = {};\n  var inputIsValueOnly = attributes.type && VALUE_ONLY_INPUTS[attributes.type];\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName];\n\n    // ARIA (aria-*) or custom data (data-*) attribute\n    if (reactProperty.isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    }\n\n    // convert HTML/SVG attribute to React prop\n    attributeNameLowerCased = attributeName.toLowerCase();\n    propName = getPropName(attributeNameLowerCased);\n    if (propName) {\n      propertyInfo = reactProperty.getPropertyInfo(propName);\n\n      // convert attribute to uncontrolled component prop (e.g., `value` to `defaultValue`)\n      if (UNCONTROLLED_COMPONENT_ATTRIBUTES.indexOf(propName) !== -1 && UNCONTROLLED_COMPONENT_NAMES.indexOf(nodeName) !== -1 && !inputIsValueOnly) {\n        propName = getPropName('default' + attributeNameLowerCased);\n      }\n      props[propName] = attributeValue;\n      switch (propertyInfo && propertyInfo.type) {\n        case reactProperty.BOOLEAN:\n          props[propName] = true;\n          break;\n        case reactProperty.OVERLOADED_BOOLEAN:\n          if (attributeValue === '') {\n            props[propName] = true;\n          }\n          break;\n      }\n      continue;\n    }\n\n    // preserve custom attribute if React >=16\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  }\n\n  // transform inline style to object\n  utilities.setStyleProp(attributes.style, props);\n  return props;\n};\n\n/**\r\n * Gets prop name from lowercased attribute name.\r\n *\r\n * @param {string} attributeName - Lowercased attribute name.\r\n * @returns - Prop name.\r\n */\nfunction getPropName(attributeName) {\n  return reactProperty.possibleStandardNames[attributeName];\n}","map":{"version":3,"names":["reactProperty","require","utilities","UNCONTROLLED_COMPONENT_ATTRIBUTES","UNCONTROLLED_COMPONENT_NAMES","VALUE_ONLY_INPUTS","reset","submit","module","exports","attributesToProps","attributes","nodeName","attributeName","attributeNameLowerCased","attributeValue","propName","propertyInfo","props","inputIsValueOnly","type","isCustomAttribute","toLowerCase","getPropName","getPropertyInfo","indexOf","BOOLEAN","OVERLOADED_BOOLEAN","PRESERVE_CUSTOM_ATTRIBUTES","setStyleProp","style","possibleStandardNames"],"sources":["C:/Users/joaki/OneDrive/Escritorio/Develop/Proyectos personales/Food/PI-Main_food/client/node_modules/html-react-parser/lib/attributes-to-props.js"],"sourcesContent":["var reactProperty = require('react-property');\r\nvar utilities = require('./utilities');\r\n\r\n// https://reactjs.org/docs/uncontrolled-components.html\r\n// https://developer.mozilla.org/docs/Web/HTML/Attributes\r\nvar UNCONTROLLED_COMPONENT_ATTRIBUTES = ['checked', 'value'];\r\nvar UNCONTROLLED_COMPONENT_NAMES = ['input', 'select', 'textarea'];\r\n\r\nvar VALUE_ONLY_INPUTS = {\r\n  reset: true,\r\n  submit: true\r\n};\r\n\r\n/**\r\n * Converts HTML/SVG DOM attributes to React props.\r\n *\r\n * @param {object} [attributes={}] - HTML/SVG DOM attributes.\r\n * @param {string} [nodeName] - DOM node name.\r\n * @returns - React props.\r\n */\r\nmodule.exports = function attributesToProps(attributes, nodeName) {\r\n  attributes = attributes || {};\r\n\r\n  var attributeName;\r\n  var attributeNameLowerCased;\r\n  var attributeValue;\r\n  var propName;\r\n  var propertyInfo;\r\n  var props = {};\r\n  var inputIsValueOnly = attributes.type && VALUE_ONLY_INPUTS[attributes.type];\r\n\r\n  for (attributeName in attributes) {\r\n    attributeValue = attributes[attributeName];\r\n\r\n    // ARIA (aria-*) or custom data (data-*) attribute\r\n    if (reactProperty.isCustomAttribute(attributeName)) {\r\n      props[attributeName] = attributeValue;\r\n      continue;\r\n    }\r\n\r\n    // convert HTML/SVG attribute to React prop\r\n    attributeNameLowerCased = attributeName.toLowerCase();\r\n    propName = getPropName(attributeNameLowerCased);\r\n\r\n    if (propName) {\r\n      propertyInfo = reactProperty.getPropertyInfo(propName);\r\n\r\n      // convert attribute to uncontrolled component prop (e.g., `value` to `defaultValue`)\r\n      if (\r\n        UNCONTROLLED_COMPONENT_ATTRIBUTES.indexOf(propName) !== -1 &&\r\n        UNCONTROLLED_COMPONENT_NAMES.indexOf(nodeName) !== -1 &&\r\n        !inputIsValueOnly\r\n      ) {\r\n        propName = getPropName('default' + attributeNameLowerCased);\r\n      }\r\n\r\n      props[propName] = attributeValue;\r\n\r\n      switch (propertyInfo && propertyInfo.type) {\r\n        case reactProperty.BOOLEAN:\r\n          props[propName] = true;\r\n          break;\r\n        case reactProperty.OVERLOADED_BOOLEAN:\r\n          if (attributeValue === '') {\r\n            props[propName] = true;\r\n          }\r\n          break;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    // preserve custom attribute if React >=16\r\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\r\n      props[attributeName] = attributeValue;\r\n    }\r\n  }\r\n\r\n  // transform inline style to object\r\n  utilities.setStyleProp(attributes.style, props);\r\n\r\n  return props;\r\n};\r\n\r\n/**\r\n * Gets prop name from lowercased attribute name.\r\n *\r\n * @param {string} attributeName - Lowercased attribute name.\r\n * @returns - Prop name.\r\n */\r\nfunction getPropName(attributeName) {\r\n  return reactProperty.possibleStandardNames[attributeName];\r\n}\r\n"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC7C,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA,IAAIE,iCAAiC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC;AAC5D,IAAIC,4BAA4B,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC;AAElE,IAAIC,iBAAiB,GAAG;EACtBC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,iBAAiBA,CAACC,UAAU,EAAEC,QAAQ,EAAE;EAChED,UAAU,GAAGA,UAAU,IAAI,CAAC,CAAC;EAE7B,IAAIE,aAAa;EACjB,IAAIC,uBAAuB;EAC3B,IAAIC,cAAc;EAClB,IAAIC,QAAQ;EACZ,IAAIC,YAAY;EAChB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,gBAAgB,GAAGR,UAAU,CAACS,IAAI,IAAIf,iBAAiB,CAACM,UAAU,CAACS,IAAI,CAAC;EAE5E,KAAKP,aAAa,IAAIF,UAAU,EAAE;IAChCI,cAAc,GAAGJ,UAAU,CAACE,aAAa,CAAC;;IAE1C;IACA,IAAIb,aAAa,CAACqB,iBAAiB,CAACR,aAAa,CAAC,EAAE;MAClDK,KAAK,CAACL,aAAa,CAAC,GAAGE,cAAc;MACrC;IACF;;IAEA;IACAD,uBAAuB,GAAGD,aAAa,CAACS,WAAW,EAAE;IACrDN,QAAQ,GAAGO,WAAW,CAACT,uBAAuB,CAAC;IAE/C,IAAIE,QAAQ,EAAE;MACZC,YAAY,GAAGjB,aAAa,CAACwB,eAAe,CAACR,QAAQ,CAAC;;MAEtD;MACA,IACEb,iCAAiC,CAACsB,OAAO,CAACT,QAAQ,CAAC,KAAK,CAAC,CAAC,IAC1DZ,4BAA4B,CAACqB,OAAO,CAACb,QAAQ,CAAC,KAAK,CAAC,CAAC,IACrD,CAACO,gBAAgB,EACjB;QACAH,QAAQ,GAAGO,WAAW,CAAC,SAAS,GAAGT,uBAAuB,CAAC;MAC7D;MAEAI,KAAK,CAACF,QAAQ,CAAC,GAAGD,cAAc;MAEhC,QAAQE,YAAY,IAAIA,YAAY,CAACG,IAAI;QACvC,KAAKpB,aAAa,CAAC0B,OAAO;UACxBR,KAAK,CAACF,QAAQ,CAAC,GAAG,IAAI;UACtB;QACF,KAAKhB,aAAa,CAAC2B,kBAAkB;UACnC,IAAIZ,cAAc,KAAK,EAAE,EAAE;YACzBG,KAAK,CAACF,QAAQ,CAAC,GAAG,IAAI;UACxB;UACA;MAAM;MAEV;IACF;;IAEA;IACA,IAAId,SAAS,CAAC0B,0BAA0B,EAAE;MACxCV,KAAK,CAACL,aAAa,CAAC,GAAGE,cAAc;IACvC;EACF;;EAEA;EACAb,SAAS,CAAC2B,YAAY,CAAClB,UAAU,CAACmB,KAAK,EAAEZ,KAAK,CAAC;EAE/C,OAAOA,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,WAAWA,CAACV,aAAa,EAAE;EAClC,OAAOb,aAAa,CAAC+B,qBAAqB,CAAClB,aAAa,CAAC;AAC3D"},"metadata":{},"sourceType":"script"}