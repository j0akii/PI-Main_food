{"ast":null,"code":"const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\nconst validateName = /^[a-zA-Z\\s]*$/;\nconst validateNumber = /^\\d*$/;\nfunction Name(type, errors, setErrors) {\n  // Recipe Name Validation:\n\n  if (type.name.length) {\n    console.log('entro name');\n    if (type.name.length > 30) {\n      console.log(typeof type.name === \"string\");\n      setErrors({\n        ...errors,\n        name: \"* The title must have at most 30 characters\"\n      });\n    } else if (validateName.test(type.name) === false) {\n      setErrors({\n        ...errors,\n        name: \"* The title can only contain letters\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        name: \"\"\n      });\n    }\n  }\n}\n_c = Name;\nfunction Price(type, errros, setErrors) {\n  // Recipe Price Validation:\n\n  if (type.price.length) {\n    console.log(\"entro price\");\n    if (validateNumber.test(type.price) === false) {\n      setErrors({\n        ...errors,\n        price: \"* The price can only contain numbers\"\n      });\n    } else if (type.price.length > 9) {\n      setErrors({\n        ...errors,\n        price: \"* The price is too big\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        price: \"\"\n      });\n    }\n  }\n}\n\n// Recipe Image Validation:\n_c2 = Price;\nif (type.image.length) {\n  console.log(\"entro image\");\n  if (validateURL.test(type.image) === false) {\n    setErrors({\n      ...errors,\n      image: \"* The image url its invalid\"\n    });\n  } else {\n    setErrors({\n      ...errors,\n      image: \"\"\n    });\n  }\n}\n\n// Recipe Health Score Validation:\n\nif (type.healthScore.length) {\n  console.log(\"entro health\");\n  if (validateNumber.test(type.healthScore) === false) {\n    setErrors({\n      ...errors,\n      healthScore: \"* The Health Score can only contain numbers\"\n    });\n  } else if (type.healthScore > 100) {\n    setErrors({\n      ...errors,\n      healthScore: \"* The Health Score is too much\"\n    });\n  } else {\n    setErrors({\n      ...errors,\n      healthScore: \"\"\n    });\n  }\n}\n\n// Recipe Summary Validation:\n\nif (type.summary.length) {\n  console.log(\"entro summary\");\n  if (type.summary.length > 80) {\n    setErrors({\n      ...errors,\n      summary: \"* The summary must have at most 80 characters\"\n    });\n  } else {\n    setErrors({\n      ...errors,\n      summary: \"\"\n    });\n  }\n}\n\n// Recipe Step By Step Validation:\n\nif (type.stepByStep.length) {\n  console.log(\"entro step\");\n  if (type.stepByStep.length > 620) {\n    setErrors({\n      ...errors,\n      stepByStep: \"* The step by step must have at most 620 characters\"\n    });\n  } else {\n    setErrors({\n      ...errors,\n      stepByStep: \"\"\n    });\n  }\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"Name\");\n$RefreshReg$(_c2, \"Price\");","map":{"version":3,"names":["validateURL","validateName","validateNumber","Name","type","errors","setErrors","name","length","console","log","test","_c","Price","errros","price","_c2","image","healthScore","summary","stepByStep","$RefreshReg$"],"sources":["/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations/Validations.js"],"sourcesContent":["const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\nconst validateName = /^[a-zA-Z\\s]*$/;\nconst validateNumber = /^\\d*$/;\n    \n    function Name (type, errors, setErrors) {\n      // Recipe Name Validation:\n\n      if (type.name.length) {\n        console.log('entro name')\n\n        if (type.name.length > 30) {\n          console.log(typeof type.name === \"string\");\n          setErrors({\n            ...errors,\n            name: \"* The title must have at most 30 characters\",\n          });\n        } else if (validateName.test(type.name) === false) {\n          setErrors({\n            ...errors,\n            name: \"* The title can only contain letters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            name: \"\",\n          });\n        }\n      }\n    }\n\n    function Price (type, errros, setErrors) {\n      // Recipe Price Validation:\n\n      if (type.price.length) {\n        console.log(\"entro price\");\n\n        if (validateNumber.test(type.price) === false) {\n          setErrors({\n            ...errors,\n            price: \"* The price can only contain numbers\",\n          });\n        } else if (type.price.length > 9) {\n          setErrors({\n            ...errors,\n            price: \"* The price is too big\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            price: \"\",\n          });\n        }\n      }\n    }\n\n\n\n      // Recipe Image Validation:\n\n      if (type.image.length) {\n        console.log(\"entro image\");\n\n        if (validateURL.test(type.image) === false) {\n          setErrors({\n            ...errors,\n            image: \"* The image url its invalid\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            image: \"\",\n          });\n        }\n      }\n\n      // Recipe Health Score Validation:\n\n      if (type.healthScore.length) {\n        console.log(\"entro health\");\n\n        if (validateNumber.test(type.healthScore) === false) {\n          setErrors({\n            ...errors,\n            healthScore: \"* The Health Score can only contain numbers\",\n          });\n        } else if (type.healthScore > 100) {\n          setErrors({\n            ...errors,\n            healthScore: \"* The Health Score is too much\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            healthScore: \"\",\n          });\n        }\n      }\n\n      // Recipe Summary Validation:\n\n      if (type.summary.length) {\n        console.log(\"entro summary\");\n\n        if (type.summary.length > 80) {\n          setErrors({\n            ...errors,\n            summary: \"* The summary must have at most 80 characters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            summary: \"\",\n          });\n        }\n      }\n\n      // Recipe Step By Step Validation:\n\n      if (type.stepByStep.length) {\n        console.log(\"entro step\");\n\n        if (type.stepByStep.length > 620) {\n          setErrors({\n            ...errors,\n            stepByStep: \"* The step by step must have at most 620 characters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            stepByStep: \"\",\n          });\n        }\n      }"],"mappings":"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"},"metadata":{},"sourceType":"module"}