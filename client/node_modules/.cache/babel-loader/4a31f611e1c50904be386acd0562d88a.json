{"ast":null,"code":"export default function Validations(type, setErrors) {\n  const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n  const validateName = /^[A-Za-z]+$/;\n  const validateNumber = /^\\d*$/;\n\n  // Recipe Name Validation:\n\n  if (type.name.length) {\n    console.log('entro name');\n    if (type.name.length > 30) {\n      setErrors({\n        ...errors,\n        name: \"* The title must have at most 30 characters\"\n      });\n    } else if (validateName.test(type.name) === false) {\n      setErrors({\n        ...errors,\n        name: \"* The title can only contain letters\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        name: \"\"\n      });\n    }\n  }\n\n  // Recipe Price Validation:\n\n  if (type.price.length) {\n    if (validateNumber.test(type.price) === false) {\n      setErrors({\n        ...errors,\n        price: \"* The price can only contain numbers\"\n      });\n    } else if (type.price.length > 9) {\n      setErrors({\n        ...errors,\n        price: \"* The price is too big\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        price: \"\"\n      });\n    }\n  }\n\n  // Recipe Image Validation:\n\n  if (type.image.length) {\n    if (validateURL.test(type.image) === false) {\n      setErrors({\n        ...errors,\n        image: \"* The image url its invalid\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        image: \"\"\n      });\n    }\n  }\n\n  // Recipe Health Score Validation:\n\n  if (type.healthScore.length) {\n    if (validateNumber.test(type.healthScore) === false) {\n      setErrors({\n        ...errors,\n        healthScore: \"* The Health Score can only contain numbers\"\n      });\n    } else if (type.healthScore > 100) {\n      setErrors({\n        ...errors,\n        healthScore: \"* The Health Score is too much\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        healthScore: \"\"\n      });\n    }\n  }\n\n  // Recipe Summary Validation:\n\n  if (type.summary.length) {\n    if (type.summary.length > 80) {\n      setErrors({\n        ...errors,\n        summary: \"* The summary must have at most 80 characters\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        summary: \"\"\n      });\n    }\n  }\n\n  // Recipe Step By Step Validation:\n\n  if (type.stepByStep.length) {\n    if (type.stepByStep.length > 620) {\n      setErrors({\n        ...errors,\n        stepByStep: \"* The step by step must have at most 620 characters\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        stepByStep: \"\"\n      });\n    }\n  }\n}\n_c = Validations;\nvar _c;\n$RefreshReg$(_c, \"Validations\");","map":{"version":3,"names":["Validations","type","setErrors","validateURL","validateName","validateNumber","name","length","console","log","errors","test","price","image","healthScore","summary","stepByStep","_c","$RefreshReg$"],"sources":["/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations.js"],"sourcesContent":["    export default function Validations (type, setErrors) {\n      const validateURL = /^(ftp|http|https):\\/\\/[^ \"]+$/;\n      const validateName = /^[A-Za-z]+$/;\n      const validateNumber = /^\\d*$/;\n\n      // Recipe Name Validation:\n\n      if (type.name.length) {\n        console.log('entro name')\n\n        if (type.name.length > 30) {\n          setErrors({\n            ...errors,\n            name: \"* The title must have at most 30 characters\",\n          });\n        } else if (validateName.test(type.name) === false) {\n          setErrors({\n            ...errors,\n            name: \"* The title can only contain letters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            name: \"\",\n          });\n        }\n      }\n\n      // Recipe Price Validation:\n\n      if (type.price.length) {\n        if (validateNumber.test(type.price) === false) {\n          setErrors({\n            ...errors,\n            price: \"* The price can only contain numbers\",\n          });\n        } else if (type.price.length > 9) {\n          setErrors({\n            ...errors,\n            price: \"* The price is too big\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            price: \"\",\n          });\n        }\n      }\n\n      // Recipe Image Validation:\n\n      if (type.image.length) {\n        if (validateURL.test(type.image) === false) {\n          setErrors({\n            ...errors,\n            image: \"* The image url its invalid\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            image: \"\",\n          });\n        }\n      }\n\n      // Recipe Health Score Validation:\n\n      if (type.healthScore.length) {\n        if (validateNumber.test(type.healthScore) === false) {\n          setErrors({\n            ...errors,\n            healthScore: \"* The Health Score can only contain numbers\",\n          });\n        } else if (type.healthScore > 100) {\n          setErrors({\n            ...errors,\n            healthScore: \"* The Health Score is too much\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            healthScore: \"\",\n          });\n        }\n      }\n\n      // Recipe Summary Validation:\n\n      if (type.summary.length) {\n        if (type.summary.length > 80) {\n          setErrors({\n            ...errors,\n            summary: \"* The summary must have at most 80 characters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            summary: \"\",\n          });\n        }\n      }\n\n      // Recipe Step By Step Validation:\n\n      if (type.stepByStep.length) {\n        if (type.stepByStep.length > 620) {\n          setErrors({\n            ...errors,\n            stepByStep: \"* The step by step must have at most 620 characters\",\n          });\n        } else {\n          setErrors({\n            ...errors,\n            stepByStep: \"\",\n          });\n        }\n      }\n    }"],"mappings":"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"},"metadata":{},"sourceType":"module"}