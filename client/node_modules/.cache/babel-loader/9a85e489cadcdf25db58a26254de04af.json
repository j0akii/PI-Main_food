{"ast":null,"code":"export default function Validations(type, errors, setErrors) {\n  const validateURL = url => {\n    return /^(ftp|http|https):\\/\\/[^ \"]+$/.test(url);\n  };\n\n  // Recipe Name Validation:\n\n  if (type.name.length > 30) {\n    console.log(type.name.length);\n    setErrors({\n      ...errors,\n      name: \"The title must have at most 30 characters\"\n    });\n  }\n  if (typeof type.name !== 'string') {\n    setErrors({\n      ...errors,\n      name: \"The title can only contain letters\"\n    });\n  }\n  if (type.name.length < 30 && typeof type.name === 'string') {\n    setErrors({\n      ...errors,\n      name: \"\"\n    });\n  }\n\n  // Recipe Price Validation:\n\n  if (type.price.length > 9) {\n    setErrors({\n      ...errors,\n      price: \"The price is too big\"\n    });\n  }\n  if (typeof type.price !== 'number') {\n    setErrors({\n      ...errors,\n      price: \"The price can only contain numbers\"\n    });\n  }\n  if (type.price.length < 9 && typeof type.price === 'number') {\n    setErrors({\n      ...errors,\n      price: \"\"\n    });\n  }\n\n  // Recipe Image Validation:\n\n  if (type.image) {\n    const isValid = validateURL(type.image.value);\n    if (isValid === false) {\n      setErrors({\n        ...errors,\n        image: \"The image url its invalid\"\n      });\n    } else {\n      setErrors({\n        ...errors,\n        image: \"\"\n      });\n    }\n  }\n\n  // Recipe Health Score Validation:\n\n  if (typeof type.healthScore !== \"number\") {\n    setErrors({\n      ...errors,\n      healthScore: \"The Health Score can only contain numbers\"\n    });\n  }\n  if (type.healthScore.value > 100) {\n    setErrors({\n      ...errors,\n      healthScore: \"The Health Score is too much\"\n    });\n  }\n  if (type.healthScore.value < 100 && typeof type.healthScore === \"number\") {\n    setErrors({\n      ...errors,\n      healthScore: \"\"\n    });\n  }\n}\n_c = Validations;\nvar _c;\n$RefreshReg$(_c, \"Validations\");","map":{"version":3,"names":["Validations","type","errors","setErrors","validateURL","url","test","name","length","console","log","price","image","isValid","value","healthScore","_c","$RefreshReg$"],"sources":["/home/j0aki/Desktop/Develop/Henry/PI-Food-main/client/src/components/Form/Validations.js"],"sourcesContent":["export default function Validations (type, errors, setErrors) {\n    const validateURL = (url) => {\n        return /^(ftp|http|https):\\/\\/[^ \"]+$/.test(url);\n    }\n\n    // Recipe Name Validation:\n\n    if (type.name.length > 30) {\n        console.log(type.name.length)\n        setErrors({\n            ...errors,\n            name: \"The title must have at most 30 characters\",\n        });\n    }\n    if (typeof type.name !== 'string') {\n        setErrors({ \n            ...errors,\n            name: \"The title can only contain letters\"\n        });\n    }\n    if (type.name.length < 30 && typeof type.name === 'string') {\n        setErrors({ \n            ...errors,\n            name: \"\"\n        });\n    }\n\n    // Recipe Price Validation:\n\n    if (type.price.length > 9) {\n        setErrors({\n            ...errors,\n            price: \"The price is too big\",\n        });\n    }\n    if (typeof type.price !== 'number') {\n        setErrors({ \n            ...errors,\n            price: \"The price can only contain numbers\"\n        });\n    }\n    if (type.price.length < 9 && typeof type.price === 'number') {\n        setErrors({ \n            ...errors,\n            price: \"\"\n        });\n    }\n\n    // Recipe Image Validation:\n\n    if (type.image) {\n        const isValid = validateURL(type.image.value)\n        if (isValid === false) {\n            setErrors({ \n                ...errors,\n                image: \"The image url its invalid\"\n            });\n        }\n        else {\n            setErrors({ \n                ...errors,\n                image: \"\"\n            });\n        }\n    }\n\n    // Recipe Health Score Validation:\n\n        if (typeof type.healthScore !== \"number\") {\n          setErrors({\n            ...errors,\n            healthScore: \"The Health Score can only contain numbers\",\n          });\n        }\n        if (type.healthScore.value > 100) {\n          setErrors({\n            ...errors,\n            healthScore: \"The Health Score is too much\",\n          });\n        }\n        if (type.healthScore.value < 100 && typeof type.healthScore === \"number\") {\n          setErrors({\n            ...errors,\n            healthScore: \"\",\n          });\n        }\n}"],"mappings":"AAAA,eAAe,SAASA,WAAWA,CAAEC,IAAI,EAAEC,MAAM,EAAEC,SAAS,EAAE;EAC1D,MAAMC,WAAW,GAAIC,GAAG,IAAK;IACzB,OAAO,+BAA+B,CAACC,IAAI,CAACD,GAAG,CAAC;EACpD,CAAC;;EAED;;EAEA,IAAIJ,IAAI,CAACM,IAAI,CAACC,MAAM,GAAG,EAAE,EAAE;IACvBC,OAAO,CAACC,GAAG,CAACT,IAAI,CAACM,IAAI,CAACC,MAAM,CAAC;IAC7BL,SAAS,CAAC;MACN,GAAGD,MAAM;MACTK,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA,IAAI,OAAON,IAAI,CAACM,IAAI,KAAK,QAAQ,EAAE;IAC/BJ,SAAS,CAAC;MACN,GAAGD,MAAM;MACTK,IAAI,EAAE;IACV,CAAC,CAAC;EACN;EACA,IAAIN,IAAI,CAACM,IAAI,CAACC,MAAM,GAAG,EAAE,IAAI,OAAOP,IAAI,CAACM,IAAI,KAAK,QAAQ,EAAE;IACxDJ,SAAS,CAAC;MACN,GAAGD,MAAM;MACTK,IAAI,EAAE;IACV,CAAC,CAAC;EACN;;EAEA;;EAEA,IAAIN,IAAI,CAACU,KAAK,CAACH,MAAM,GAAG,CAAC,EAAE;IACvBL,SAAS,CAAC;MACN,GAAGD,MAAM;MACTS,KAAK,EAAE;IACX,CAAC,CAAC;EACN;EACA,IAAI,OAAOV,IAAI,CAACU,KAAK,KAAK,QAAQ,EAAE;IAChCR,SAAS,CAAC;MACN,GAAGD,MAAM;MACTS,KAAK,EAAE;IACX,CAAC,CAAC;EACN;EACA,IAAIV,IAAI,CAACU,KAAK,CAACH,MAAM,GAAG,CAAC,IAAI,OAAOP,IAAI,CAACU,KAAK,KAAK,QAAQ,EAAE;IACzDR,SAAS,CAAC;MACN,GAAGD,MAAM;MACTS,KAAK,EAAE;IACX,CAAC,CAAC;EACN;;EAEA;;EAEA,IAAIV,IAAI,CAACW,KAAK,EAAE;IACZ,MAAMC,OAAO,GAAGT,WAAW,CAACH,IAAI,CAACW,KAAK,CAACE,KAAK,CAAC;IAC7C,IAAID,OAAO,KAAK,KAAK,EAAE;MACnBV,SAAS,CAAC;QACN,GAAGD,MAAM;QACTU,KAAK,EAAE;MACX,CAAC,CAAC;IACN,CAAC,MACI;MACDT,SAAS,CAAC;QACN,GAAGD,MAAM;QACTU,KAAK,EAAE;MACX,CAAC,CAAC;IACN;EACJ;;EAEA;;EAEI,IAAI,OAAOX,IAAI,CAACc,WAAW,KAAK,QAAQ,EAAE;IACxCZ,SAAS,CAAC;MACR,GAAGD,MAAM;MACTa,WAAW,EAAE;IACf,CAAC,CAAC;EACJ;EACA,IAAId,IAAI,CAACc,WAAW,CAACD,KAAK,GAAG,GAAG,EAAE;IAChCX,SAAS,CAAC;MACR,GAAGD,MAAM;MACTa,WAAW,EAAE;IACf,CAAC,CAAC;EACJ;EACA,IAAId,IAAI,CAACc,WAAW,CAACD,KAAK,GAAG,GAAG,IAAI,OAAOb,IAAI,CAACc,WAAW,KAAK,QAAQ,EAAE;IACxEZ,SAAS,CAAC;MACR,GAAGD,MAAM;MACTa,WAAW,EAAE;IACf,CAAC,CAAC;EACJ;AACR;AAACC,EAAA,GAtFuBhB,WAAW;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}